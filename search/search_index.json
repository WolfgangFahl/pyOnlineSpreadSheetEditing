{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyOnlineSpreadSheetEditing API Documentation","text":""},{"location":"#onlinespreadsheet.editconfig","title":"<code>editconfig</code>","text":"<p>Created on 2021-12-31</p> <p>@author: wf</p>"},{"location":"#onlinespreadsheet.editconfig.EditConfig","title":"<code>EditConfig</code>","text":"<p>Edit and Query Configuration.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the configuration.</p> <code>sourceWikiId</code> <code>Optional[str]</code> <p>The source Wiki ID.</p> <code>targetWikiId</code> <code>Optional[str]</code> <p>The target Wiki ID.</p> <code>queries</code> <code>Dict[str, str]</code> <p>The queries dictionary.</p> <code>format</code> <code>Optional[str]</code> <p>The format of the output.</p> Source code in <code>onlinespreadsheet/editconfig.py</code> <pre><code>@lod_storable\nclass EditConfig:\n    \"\"\"\n    Edit and Query Configuration.\n\n    Attributes:\n        name (str): The name of the configuration.\n        sourceWikiId (Optional[str]): The source Wiki ID.\n        targetWikiId (Optional[str]): The target Wiki ID.\n        queries (Dict[str, str]): The queries dictionary.\n        format (Optional[str]): The format of the output.\n    \"\"\"\n\n    name: str\n    sourceWikiId: Optional[str] = None\n    targetWikiId: Optional[str] = None\n    queries: Dict[str, str] = field(default_factory=dict)\n    format: Optional[str] = None\n\n    def addQuery(self, name: str, query: str):\n        self.queries[name] = query\n        return self\n\n    def toTableQuery(self) -&gt; TableQuery:\n        \"\"\"\n        convert me to a TableQuery\n\n        Returns:\n            TableQuery: the table query for my queries\n        \"\"\"\n        tq = TableQuery()\n        for name, query in self.queries.items():\n            queryType = TableQuery.guessQueryType(query)\n            if queryType is QueryType.INVALID:\n                raise Exception(f\"unknown / invalid query Type for query {name}\")\n            elif queryType is QueryType.ASK:\n                tq.addAskQuery(self.sourceWikiId, name, query)\n            elif queryType is QueryType.RESTful:\n                tq.addRESTfulQuery(name=name, url=query)\n            elif queryType is queryType.SPARQL:\n                tq.addSparqlQuery(name=name, query=query)\n            else:\n                raise Exception(f\"unimplemented query type {queryType}\")\n        return tq\n</code></pre>"},{"location":"#onlinespreadsheet.editconfig.EditConfig.toTableQuery","title":"<code>toTableQuery()</code>","text":"<p>convert me to a TableQuery</p> <p>Returns:</p> Name Type Description <code>TableQuery</code> <code>TableQuery</code> <p>the table query for my queries</p> Source code in <code>onlinespreadsheet/editconfig.py</code> <pre><code>def toTableQuery(self) -&gt; TableQuery:\n    \"\"\"\n    convert me to a TableQuery\n\n    Returns:\n        TableQuery: the table query for my queries\n    \"\"\"\n    tq = TableQuery()\n    for name, query in self.queries.items():\n        queryType = TableQuery.guessQueryType(query)\n        if queryType is QueryType.INVALID:\n            raise Exception(f\"unknown / invalid query Type for query {name}\")\n        elif queryType is QueryType.ASK:\n            tq.addAskQuery(self.sourceWikiId, name, query)\n        elif queryType is QueryType.RESTful:\n            tq.addRESTfulQuery(name=name, url=query)\n        elif queryType is queryType.SPARQL:\n            tq.addSparqlQuery(name=name, query=query)\n        else:\n            raise Exception(f\"unimplemented query type {queryType}\")\n    return tq\n</code></pre>"},{"location":"#onlinespreadsheet.editconfig.EditConfigs","title":"<code>EditConfigs</code>","text":"<p>manager for edit configurations</p> Source code in <code>onlinespreadsheet/editconfig.py</code> <pre><code>@lod_storable\nclass EditConfigs:\n    \"\"\"\n    manager for edit configurations\n    \"\"\"\n\n    editConfigs: Dict[str, EditConfig] = field(default_factory=dict)\n\n    @classmethod\n    def get_yaml_path(cls):\n        home = str(Path.home())\n        path = f\"{home}/.ose\"\n        yamlFileName = \"editConfigs.yaml\"\n        yaml_path = f\"{path}/{yamlFileName}\"\n        return yaml_path\n\n    def add(self, editConfig):\n        \"\"\"\n        add a editConfiguration\n        \"\"\"\n        self.editConfigs[editConfig.name] = editConfig\n\n    def save(self, yaml_path: str = None):\n        if yaml_path is None:\n            yaml_path = EditConfigs.get_yaml_path()\n        os.makedirs(os.path.dirname(yaml_path), exist_ok=True)\n        self.save_to_yaml_file(yaml_path)\n\n    @classmethod\n    def load(cls, yaml_path: str = None):\n        if yaml_path is None:\n            yaml_path = EditConfigs.get_yaml_path()\n        edit_configs = cls.load_from_yaml_file(yaml_path)\n        return edit_configs\n</code></pre>"},{"location":"#onlinespreadsheet.editconfig.EditConfigs.add","title":"<code>add(editConfig)</code>","text":"<p>add a editConfiguration</p> Source code in <code>onlinespreadsheet/editconfig.py</code> <pre><code>def add(self, editConfig):\n    \"\"\"\n    add a editConfiguration\n    \"\"\"\n    self.editConfigs[editConfig.name] = editConfig\n</code></pre>"},{"location":"#onlinespreadsheet.gsimport","title":"<code>gsimport</code>","text":"<p>Created on 2024-03-18</p> <p>@author: wf</p>"},{"location":"#onlinespreadsheet.gsimport.GsImportSolution","title":"<code>GsImportSolution</code>","text":"<p>               Bases: <code>InputWebSolution</code></p> <p>the google spreadsheet import solution</p> Source code in <code>onlinespreadsheet/gsimport.py</code> <pre><code>class GsImportSolution(InputWebSolution):\n    \"\"\"\n    the google spreadsheet import solution\n    \"\"\"\n\n    def __init__(self, webserver: GsImportWebserver, client: Client):\n        \"\"\"\n        Initialize the solution\n\n        Calls the constructor of the base solution\n        Args:\n            webserver (GsImportWebserver): The webserver instance associated with this context.\n            client (Client): The client instance this context is associated with.\n        \"\"\"\n        super().__init__(webserver, client)  # Call to the superclass constructor\n        # self.wdgrid: WikidataGrid = None\n        # self.gridSync: GridSync = None\n\n    def show_ui(self):\n        \"\"\"\n        show my user interface\n        \"\"\"\n        self.ssv = SpreadSheetView(self)\n\n    async def home(\n        self,\n    ):\n        \"\"\"Generates the home page with a selection of examples and\n        svg display\n        \"\"\"\n        await self.setup_content_div(self.show_ui)\n</code></pre>"},{"location":"#onlinespreadsheet.gsimport.GsImportSolution.__init__","title":"<code>__init__(webserver, client)</code>","text":"<p>Initialize the solution</p> <p>Calls the constructor of the base solution Args:     webserver (GsImportWebserver): The webserver instance associated with this context.     client (Client): The client instance this context is associated with.</p> Source code in <code>onlinespreadsheet/gsimport.py</code> <pre><code>def __init__(self, webserver: GsImportWebserver, client: Client):\n    \"\"\"\n    Initialize the solution\n\n    Calls the constructor of the base solution\n    Args:\n        webserver (GsImportWebserver): The webserver instance associated with this context.\n        client (Client): The client instance this context is associated with.\n    \"\"\"\n    super().__init__(webserver, client)  # Call to the superclass constructor\n</code></pre>"},{"location":"#onlinespreadsheet.gsimport.GsImportSolution.home","title":"<code>home()</code>  <code>async</code>","text":"<p>Generates the home page with a selection of examples and svg display</p> Source code in <code>onlinespreadsheet/gsimport.py</code> <pre><code>async def home(\n    self,\n):\n    \"\"\"Generates the home page with a selection of examples and\n    svg display\n    \"\"\"\n    await self.setup_content_div(self.show_ui)\n</code></pre>"},{"location":"#onlinespreadsheet.gsimport.GsImportSolution.show_ui","title":"<code>show_ui()</code>","text":"<p>show my user interface</p> Source code in <code>onlinespreadsheet/gsimport.py</code> <pre><code>def show_ui(self):\n    \"\"\"\n    show my user interface\n    \"\"\"\n    self.ssv = SpreadSheetView(self)\n</code></pre>"},{"location":"#onlinespreadsheet.gsimport.GsImportWebserver","title":"<code>GsImportWebserver</code>","text":"<p>               Bases: <code>InputWebserver</code></p> <p>Google Spreadsheet Import and Wikidata Sync</p> Source code in <code>onlinespreadsheet/gsimport.py</code> <pre><code>class GsImportWebserver(InputWebserver):\n    \"\"\"\n    Google Spreadsheet Import and Wikidata Sync\n    \"\"\"\n\n    @classmethod\n    def get_config(cls) -&gt; WebserverConfig:\n        copy_right = \"(c)2022-2024 Wolfgang Fahl\"\n        config = WebserverConfig(\n            copy_right=copy_right,\n            version=Version(),\n            default_port=9854,\n            short_name=\"gsimport\",\n        )\n        server_config = WebserverConfig.get(config)\n        server_config.solution_class = GsImportSolution\n        return server_config\n\n    def __init__(self):\n        \"\"\"Constructs all the necessary attributes for the WebServer object.\"\"\"\n        config = GsImportWebserver.get_config()\n        print(\"initializing Property Manager\")\n        self.wpm = WikidataPropertyManager.get_instance()\n        print(\"Properties prepared ...\")\n        InputWebserver.__init__(self, config=config)\n</code></pre>"},{"location":"#onlinespreadsheet.gsimport.GsImportWebserver.__init__","title":"<code>__init__()</code>","text":"<p>Constructs all the necessary attributes for the WebServer object.</p> Source code in <code>onlinespreadsheet/gsimport.py</code> <pre><code>def __init__(self):\n    \"\"\"Constructs all the necessary attributes for the WebServer object.\"\"\"\n    config = GsImportWebserver.get_config()\n    print(\"initializing Property Manager\")\n    self.wpm = WikidataPropertyManager.get_instance()\n    print(\"Properties prepared ...\")\n    InputWebserver.__init__(self, config=config)\n</code></pre>"},{"location":"#onlinespreadsheet.gsimport_cmd","title":"<code>gsimport_cmd</code>","text":"<p>Created on 2024-03-18</p> <p>@author: wf</p>"},{"location":"#onlinespreadsheet.gsimport_cmd.GoogleSheetWikidataCmd","title":"<code>GoogleSheetWikidataCmd</code>","text":"<p>               Bases: <code>WebserverCmd</code></p> <p>Command line tool for managing Google Sheets to Wikidata imports via a web server.</p> Source code in <code>onlinespreadsheet/gsimport_cmd.py</code> <pre><code>class GoogleSheetWikidataCmd(WebserverCmd):\n    \"\"\"\n    Command line tool for managing Google Sheets to Wikidata imports via a web server.\n    \"\"\"\n\n    def getArgParser(self, description: str, version_msg: str) -&gt; ArgumentParser:\n        \"\"\"\n        Extend the default argument parser with Google Sheets to Wikidata specific arguments.\n        \"\"\"\n        parser = super().getArgParser(description, version_msg)\n        parser.add_argument(\n            \"-v\",\n            \"--verbose\",\n            action=\"store_true\",\n            help=\"Show verbose output [default: %(default)s]\",\n        )\n        parser.add_argument(\n            \"--url\",\n            required=True,\n            help=\"URL of the Google Spreadsheet to import from\",\n        )\n        parser.add_argument(\n            \"--sheets\",\n            nargs=\"+\",\n            required=True,\n            help=\"Names of the sheets to import data from\",\n        )\n        parser.add_argument(\n            \"--mappingSheet\",\n            default=\"WikidataMapping\",\n            help=\"Name of the sheet containing Wikidata mappings [default: %(default)s]\",\n        )\n        parser.add_argument(\n            \"--pk\",\n            required=True,\n            help=\"Primary key property to use for Wikidata queries\",\n        )\n        parser.add_argument(\n            \"--endpoint\",\n            default=\"https://query.wikidata.org/sparql\",\n            help=\"SPARQL endpoint URL [default: %(default)s]\",\n        )\n        parser.add_argument(\n            \"--lang\",\n            \"--language\",\n            default=\"en\",\n            help=\"Language to use for labels [default: %(default)s]\",\n        )\n        return parser\n</code></pre>"},{"location":"#onlinespreadsheet.gsimport_cmd.GoogleSheetWikidataCmd.getArgParser","title":"<code>getArgParser(description, version_msg)</code>","text":"<p>Extend the default argument parser with Google Sheets to Wikidata specific arguments.</p> Source code in <code>onlinespreadsheet/gsimport_cmd.py</code> <pre><code>def getArgParser(self, description: str, version_msg: str) -&gt; ArgumentParser:\n    \"\"\"\n    Extend the default argument parser with Google Sheets to Wikidata specific arguments.\n    \"\"\"\n    parser = super().getArgParser(description, version_msg)\n    parser.add_argument(\n        \"-v\",\n        \"--verbose\",\n        action=\"store_true\",\n        help=\"Show verbose output [default: %(default)s]\",\n    )\n    parser.add_argument(\n        \"--url\",\n        required=True,\n        help=\"URL of the Google Spreadsheet to import from\",\n    )\n    parser.add_argument(\n        \"--sheets\",\n        nargs=\"+\",\n        required=True,\n        help=\"Names of the sheets to import data from\",\n    )\n    parser.add_argument(\n        \"--mappingSheet\",\n        default=\"WikidataMapping\",\n        help=\"Name of the sheet containing Wikidata mappings [default: %(default)s]\",\n    )\n    parser.add_argument(\n        \"--pk\",\n        required=True,\n        help=\"Primary key property to use for Wikidata queries\",\n    )\n    parser.add_argument(\n        \"--endpoint\",\n        default=\"https://query.wikidata.org/sparql\",\n        help=\"SPARQL endpoint URL [default: %(default)s]\",\n    )\n    parser.add_argument(\n        \"--lang\",\n        \"--language\",\n        default=\"en\",\n        help=\"Language to use for labels [default: %(default)s]\",\n    )\n    return parser\n</code></pre>"},{"location":"#onlinespreadsheet.gsimport_cmd.main","title":"<code>main(argv=None)</code>","text":"<p>Main entry point for the command-line tool.</p> Source code in <code>onlinespreadsheet/gsimport_cmd.py</code> <pre><code>def main(argv: list = None):\n    \"\"\"\n    Main entry point for the command-line tool.\n    \"\"\"\n    cmd = GoogleSheetWikidataCmd(\n        config=GsImportWebserver.get_config(),\n        webserver_cls=GsImportWebserver,\n    )\n    exit_code = cmd.cmd_main(argv)\n    return exit_code\n</code></pre>"},{"location":"#onlinespreadsheet.profile","title":"<code>profile</code>","text":""},{"location":"#onlinespreadsheet.profile.Profile","title":"<code>Profile</code>","text":"<p>               Bases: <code>JSONAble</code></p> <p>Generates a profile page from a given wikidata id</p> Source code in <code>onlinespreadsheet/profile.py</code> <pre><code>class Profile(JSONAble):\n    \"\"\"\n    Generates a profile page from a given wikidata id\n    \"\"\"\n\n    def __init__(self, wikidataid: str):\n        super().__init__()\n        self.wikidataid = wikidataid\n        self.fromDict(self.getUserInformation()[0])\n        self.ids = self.getIdentifiers()\n\n    def getSamples(self):\n        samples = [\n            {\n                \"wikidataid\": \"Q1910001\",\n                \"firstname\": \"Matthias\",\n                \"lastname\": \"Jarke\",\n                \"image\": \"\",\n                \"dateOfBirth\": \"1952-05-28\",\n                \"homepage\": \"\",\n                \"ids\": {\n                    \"GND ID\": {\n                        \"id\": \"121078221\",\n                        \"url\": \"https://d-nb.info/gnd/121078221\",\n                    },\n                    \"DBLP author ID\": {\n                        \"id\": \"j/MatthiasJarke\",\n                        \"url\": \"https://dblp.org/pid/j/MatthiasJarke\",\n                    },\n                    \"ORCID iD\": {\n                        \"id\": \"0000-0001-6169-2942\",\n                        \"url\": \"https://orcid.org/0000-0001-6169-2942\",\n                    },\n                },\n            }\n        ]\n\n    @property\n    def sparqlEndpoint(self) -&gt; SPARQL:\n        return SPARQL(\"https://query.wikidata.org/sparql\")\n\n    def getUserInformation(self) -&gt; dict:\n        \"\"\"\n        Retrieves basic information about the user from wikidata that is assigned to the id\n        \"\"\"\n        sparql = self.sparqlEndpoint\n        query = self.getUserInformationQuery()\n        qres = sparql.queryAsListOfDicts(query.query)\n        return qres\n\n    def getIdentifiers(self) -&gt; dict:\n        \"\"\"\n        Retrieves all identifiers of the user that are assigned to the id\n\n        Returns:\n            dict of dict containing the id, idUrl, type of id\n        \"\"\"\n        sparql = self.sparqlEndpoint\n        query = self.getUserIdentifierQuery()\n        qres = sparql.queryAsListOfDicts(query.query)\n        ids = {}\n        for record in qres:\n            ids[record.get(\"propertyLabel\")] = {\n                \"id\": record.get(\"id\"),\n                \"url\": record.get(\"idUrl\"),\n            }\n        return ids\n\n    def getUserInformationQuery(self) -&gt; Query:\n        \"\"\"\n        Returns the query for basic user information\n        \"\"\"\n        queryStr = (\n            \"\"\"\n        SELECT ?firstname ?lastname ?image ?dateOfBirth ?homepage\n        WHERE{\n          VALUES ?user {wd:%s}\n\n          ?user wdt:P31 wd:Q5.\n\n          OPTIONAL{ ?user wdt:P735 ?f.\n                    ?f rdfs:label ?firstname. \n                   FILTER(lang(?firstname)=\"en\")\n          }\n          OPTIONAL{ ?user wdt:P734 ?l.\n                    ?l rdfs:label ?lastname. \n                   FILTER(lang(?lastname)=\"en\")\n          }\n          OPTIONAL{ ?user wdt:P18 ?image.}\n          OPTIONAL{ ?user wdt:P569 ?dateOfBirth.}\n          OPTIONAL{ ?user wdt:P856 ?homepage.}\n        }\n        \"\"\"\n            % self.wikidataid\n        )\n        query = Query(\n            name=\"BasicUserInformation\",\n            title=\"Basic wikidata user information\",\n            lang=\"sparql\",\n            query=queryStr,\n        )\n        return query\n\n    def getUserIdentifierQuery(self) -&gt; Query:\n        \"\"\"\n        Returns the query for the Identifiers of given human\n        \"\"\"\n        queryStr = (\n            r\"\"\"\n        SELECT ?property ?propertyLabel ?id ?idUrl\n        WHERE{\n          VALUES ?user {wd:%s}\n          ?user wdt:P31 wd:Q5.\n          ?property wikibase:propertyType wikibase:ExternalId .    \n          ?property wikibase:directClaim ?propertyclaim .                                              \n          OPTIONAL {?property wdt:P1630 ?formatterURL .}   \n          ?user ?propertyclaim ?id .    \n          BIND(IF(BOUND(?formatterURL), IRI(REPLACE(?formatterURL, \"\\\\$1\", ?id)) , \"\") AS ?idUrl) \n          SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } \n        }\"\"\"\n            % self.wikidataid\n        )\n        query = Query(\n            name=\"UserIdentifiers\",\n            title=\"The Identifiers of given human\",\n            lang=\"sparql\",\n            query=queryStr,\n        )\n        return query\n\n    def getIdIcon(self, idType):\n        \"\"\"\n        Returns a url to the icon of the given id\n        \"\"\"\n        iconMap = {\n            \"GND ID\": \"https://gnd.network/SiteGlobals/Frontend/gnd/Images/faviconGND.png?__blob=normal&amp;v=5\",\n            \"ORCID iD\": \"https://orcid.org/assets/vectors/orcid.logo.icon.svg\",\n            \"DBLP author ID\": \"https://dblp.org/img/favicon.ico\",\n            \"Twitter username\": \"https://upload.wikimedia.org/wikipedia/commons/4/4f/Twitter-logo.svg\",\n            \"GitHub username\": \"https://github.githubassets.com/favicons/favicon.svg\",\n            \"ISNI\": \"https://isni.oclc.org:2443/isni/psi_images/img_psi/3.0/logos/logo_xml_isni.png\",\n            \"Google Scholar author ID\": \"google-scholar\",\n            \"ACM Digital Library author ID\": \"acm\",\n            \"Scopus author ID\": \"scopus\",\n            \"WorldCat Identities ID\": \"https://upload.wikimedia.org/wikipedia/commons/a/a8/WorldCat_logo.svg\",\n            \"LibraryThing author ID\": \"https://image.librarything.com/pics/LT-logo-square-75-bw-w2.png\",\n            \"Dimensions author ID\": \"https://cdn-app.dimensions.ai/static/d8b0339df3b57265d674.png\",\n            \"GEPRIS person ID\": \"https://gepris.dfg.de/gepris/images/GEPRIS_Logo.png\",\n            \"Wikimedia username\": \"https://upload.wikimedia.org/wikipedia/commons/8/81/Wikimedia-logo.svg\",\n            \"Mendeley person ID\": \"mendeley\",\n            \"ResearchGate profile ID\": \"researchgate\",\n            \"Publons author ID\": \"https://publons.com/static/images/logos/square/blue_white_shadow.png\",\n            \"OpenReview.net profile ID\": \"https://openreview.net/images/openreview_logo_512.png\",\n            \"Library of Congress authority ID\": \"https://loc.gov/static/images/logo-loc-new-branding.svg\",\n        }\n        iconId = iconMap.get(idType)\n        if iconId is not None:\n            if iconId.startswith(\"http\"):\n                return f'&lt;img src=\"{ iconId }\"   alt=\"\" style=\"max-width:50px;\"&gt;'\n            else:\n                return f'&lt;i class=\"ai ai-{ iconId } ai-3x\"&gt;&lt;/i&gt;'\n        return \"\"\n</code></pre>"},{"location":"#onlinespreadsheet.profile.Profile.getIdIcon","title":"<code>getIdIcon(idType)</code>","text":"<p>Returns a url to the icon of the given id</p> Source code in <code>onlinespreadsheet/profile.py</code> <pre><code>def getIdIcon(self, idType):\n    \"\"\"\n    Returns a url to the icon of the given id\n    \"\"\"\n    iconMap = {\n        \"GND ID\": \"https://gnd.network/SiteGlobals/Frontend/gnd/Images/faviconGND.png?__blob=normal&amp;v=5\",\n        \"ORCID iD\": \"https://orcid.org/assets/vectors/orcid.logo.icon.svg\",\n        \"DBLP author ID\": \"https://dblp.org/img/favicon.ico\",\n        \"Twitter username\": \"https://upload.wikimedia.org/wikipedia/commons/4/4f/Twitter-logo.svg\",\n        \"GitHub username\": \"https://github.githubassets.com/favicons/favicon.svg\",\n        \"ISNI\": \"https://isni.oclc.org:2443/isni/psi_images/img_psi/3.0/logos/logo_xml_isni.png\",\n        \"Google Scholar author ID\": \"google-scholar\",\n        \"ACM Digital Library author ID\": \"acm\",\n        \"Scopus author ID\": \"scopus\",\n        \"WorldCat Identities ID\": \"https://upload.wikimedia.org/wikipedia/commons/a/a8/WorldCat_logo.svg\",\n        \"LibraryThing author ID\": \"https://image.librarything.com/pics/LT-logo-square-75-bw-w2.png\",\n        \"Dimensions author ID\": \"https://cdn-app.dimensions.ai/static/d8b0339df3b57265d674.png\",\n        \"GEPRIS person ID\": \"https://gepris.dfg.de/gepris/images/GEPRIS_Logo.png\",\n        \"Wikimedia username\": \"https://upload.wikimedia.org/wikipedia/commons/8/81/Wikimedia-logo.svg\",\n        \"Mendeley person ID\": \"mendeley\",\n        \"ResearchGate profile ID\": \"researchgate\",\n        \"Publons author ID\": \"https://publons.com/static/images/logos/square/blue_white_shadow.png\",\n        \"OpenReview.net profile ID\": \"https://openreview.net/images/openreview_logo_512.png\",\n        \"Library of Congress authority ID\": \"https://loc.gov/static/images/logo-loc-new-branding.svg\",\n    }\n    iconId = iconMap.get(idType)\n    if iconId is not None:\n        if iconId.startswith(\"http\"):\n            return f'&lt;img src=\"{ iconId }\"   alt=\"\" style=\"max-width:50px;\"&gt;'\n        else:\n            return f'&lt;i class=\"ai ai-{ iconId } ai-3x\"&gt;&lt;/i&gt;'\n    return \"\"\n</code></pre>"},{"location":"#onlinespreadsheet.profile.Profile.getIdentifiers","title":"<code>getIdentifiers()</code>","text":"<p>Retrieves all identifiers of the user that are assigned to the id</p> <p>Returns:</p> Type Description <code>dict</code> <p>dict of dict containing the id, idUrl, type of id</p> Source code in <code>onlinespreadsheet/profile.py</code> <pre><code>def getIdentifiers(self) -&gt; dict:\n    \"\"\"\n    Retrieves all identifiers of the user that are assigned to the id\n\n    Returns:\n        dict of dict containing the id, idUrl, type of id\n    \"\"\"\n    sparql = self.sparqlEndpoint\n    query = self.getUserIdentifierQuery()\n    qres = sparql.queryAsListOfDicts(query.query)\n    ids = {}\n    for record in qres:\n        ids[record.get(\"propertyLabel\")] = {\n            \"id\": record.get(\"id\"),\n            \"url\": record.get(\"idUrl\"),\n        }\n    return ids\n</code></pre>"},{"location":"#onlinespreadsheet.profile.Profile.getUserIdentifierQuery","title":"<code>getUserIdentifierQuery()</code>","text":"<p>Returns the query for the Identifiers of given human</p> Source code in <code>onlinespreadsheet/profile.py</code> <pre><code>def getUserIdentifierQuery(self) -&gt; Query:\n    \"\"\"\n    Returns the query for the Identifiers of given human\n    \"\"\"\n    queryStr = (\n        r\"\"\"\n    SELECT ?property ?propertyLabel ?id ?idUrl\n    WHERE{\n      VALUES ?user {wd:%s}\n      ?user wdt:P31 wd:Q5.\n      ?property wikibase:propertyType wikibase:ExternalId .    \n      ?property wikibase:directClaim ?propertyclaim .                                              \n      OPTIONAL {?property wdt:P1630 ?formatterURL .}   \n      ?user ?propertyclaim ?id .    \n      BIND(IF(BOUND(?formatterURL), IRI(REPLACE(?formatterURL, \"\\\\$1\", ?id)) , \"\") AS ?idUrl) \n      SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } \n    }\"\"\"\n        % self.wikidataid\n    )\n    query = Query(\n        name=\"UserIdentifiers\",\n        title=\"The Identifiers of given human\",\n        lang=\"sparql\",\n        query=queryStr,\n    )\n    return query\n</code></pre>"},{"location":"#onlinespreadsheet.profile.Profile.getUserInformation","title":"<code>getUserInformation()</code>","text":"<p>Retrieves basic information about the user from wikidata that is assigned to the id</p> Source code in <code>onlinespreadsheet/profile.py</code> <pre><code>def getUserInformation(self) -&gt; dict:\n    \"\"\"\n    Retrieves basic information about the user from wikidata that is assigned to the id\n    \"\"\"\n    sparql = self.sparqlEndpoint\n    query = self.getUserInformationQuery()\n    qres = sparql.queryAsListOfDicts(query.query)\n    return qres\n</code></pre>"},{"location":"#onlinespreadsheet.profile.Profile.getUserInformationQuery","title":"<code>getUserInformationQuery()</code>","text":"<p>Returns the query for basic user information</p> Source code in <code>onlinespreadsheet/profile.py</code> <pre><code>def getUserInformationQuery(self) -&gt; Query:\n    \"\"\"\n    Returns the query for basic user information\n    \"\"\"\n    queryStr = (\n        \"\"\"\n    SELECT ?firstname ?lastname ?image ?dateOfBirth ?homepage\n    WHERE{\n      VALUES ?user {wd:%s}\n\n      ?user wdt:P31 wd:Q5.\n\n      OPTIONAL{ ?user wdt:P735 ?f.\n                ?f rdfs:label ?firstname. \n               FILTER(lang(?firstname)=\"en\")\n      }\n      OPTIONAL{ ?user wdt:P734 ?l.\n                ?l rdfs:label ?lastname. \n               FILTER(lang(?lastname)=\"en\")\n      }\n      OPTIONAL{ ?user wdt:P18 ?image.}\n      OPTIONAL{ ?user wdt:P569 ?dateOfBirth.}\n      OPTIONAL{ ?user wdt:P856 ?homepage.}\n    }\n    \"\"\"\n        % self.wikidataid\n    )\n    query = Query(\n        name=\"BasicUserInformation\",\n        title=\"Basic wikidata user information\",\n        lang=\"sparql\",\n        query=queryStr,\n    )\n    return query\n</code></pre>"},{"location":"#onlinespreadsheet.profile.ProfileBlueprint","title":"<code>ProfileBlueprint</code>","text":"<p>               Bases: <code>object</code></p> <p>Flask Blueprint providing routes to the profile pages</p> Source code in <code>onlinespreadsheet/profile.py</code> <pre><code>class ProfileBlueprint(object):\n    \"\"\"\n    Flask Blueprint providing routes to the profile pages\n    \"\"\"\n\n    def __init__(self, app, name: str, template_folder: str = None, appWrap=None):\n        \"\"\"\n        construct me\n\n        Args:\n            name(str): my name\n            welcome(str): the welcome page\n            template_folder(str): the template folder\n        \"\"\"\n        self.name = name\n        if template_folder is not None:\n            self.template_folder = template_folder\n        else:\n            self.template_folder = \"profile\"\n        self.blueprint = Blueprint(\n            name, __name__, template_folder=self.template_folder, url_prefix=\"/profile\"\n        )\n        self.app = app\n        self.appWrap = appWrap\n\n        @self.blueprint.route(\"/&lt;wikidataid&gt;\")\n        def profile(wikidataid: str):\n            return self.profile(wikidataid)\n\n        app.register_blueprint(self.blueprint)\n\n    def profile(self, wikidataid: str):\n        title = \"Profile\"\n        template = os.path.join(self.template_folder, \"profile.html\")\n        activeItem = \"\"\n        profile = Profile(wikidataid)\n        html = self.appWrap.render_template(\n            template, title=title, activeItem=activeItem, profile=profile\n        )\n        return html\n</code></pre>"},{"location":"#onlinespreadsheet.profile.ProfileBlueprint.__init__","title":"<code>__init__(app, name, template_folder=None, appWrap=None)</code>","text":"<p>construct me</p> <p>Parameters:</p> Name Type Description Default <code>name(str)</code> <p>my name</p> required <code>welcome(str)</code> <p>the welcome page</p> required <code>template_folder(str)</code> <p>the template folder</p> required Source code in <code>onlinespreadsheet/profile.py</code> <pre><code>def __init__(self, app, name: str, template_folder: str = None, appWrap=None):\n    \"\"\"\n    construct me\n\n    Args:\n        name(str): my name\n        welcome(str): the welcome page\n        template_folder(str): the template folder\n    \"\"\"\n    self.name = name\n    if template_folder is not None:\n        self.template_folder = template_folder\n    else:\n        self.template_folder = \"profile\"\n    self.blueprint = Blueprint(\n        name, __name__, template_folder=self.template_folder, url_prefix=\"/profile\"\n    )\n    self.app = app\n    self.appWrap = appWrap\n\n    @self.blueprint.route(\"/&lt;wikidataid&gt;\")\n    def profile(wikidataid: str):\n        return self.profile(wikidataid)\n\n    app.register_blueprint(self.blueprint)\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync","title":"<code>record_sync</code>","text":"<p>Created on 2024-03-18</p> <p>separating ui and functional concerns @author: wf</p>"},{"location":"#onlinespreadsheet.record_sync.ComparisonData","title":"<code>ComparisonData</code>  <code>dataclass</code>","text":"<p>Stores the property name and the values to compare</p> Source code in <code>onlinespreadsheet/record_sync.py</code> <pre><code>@dataclass\nclass ComparisonData:\n    \"\"\"\n    Stores the property name and the values to compare\n    \"\"\"\n\n    property_name: str\n    left_value: typing.Any\n    right_value: typing.Any\n    chosen_sync_option: SyncAction = None\n\n    def get_sync_status(self):\n        \"\"\"\n        compare the left and right value and return their sync status\n        \"\"\"\n        status = None\n        if str(self.left_value) == str(self.right_value):\n            status = SyncStatus.IN_SYNC\n        elif self.left_value is None or self.right_value is None:\n            status = SyncStatus.SYNC_POSSIBLE\n        else:\n            status = SyncStatus.OUT_SYNC\n        return status\n\n    def get_chosen_sync_option(self) -&gt; SyncAction:\n        \"\"\"\n        chosen sync action to apply to the compared property values\n        Returns:\n            SyncAction: section to apply\n        \"\"\"\n        if self.chosen_sync_option is not None:\n            action = self.chosen_sync_option\n        else:\n            action = self.suggested_sync_action()\n        return action\n\n    def suggested_sync_action(self) -&gt; SyncAction:\n        \"\"\"\n        Evaluates the data difference and suggests a Sync Action\n        \"\"\"\n        status = self.get_sync_status()\n        if status is SyncStatus.SYNC_POSSIBLE:\n            if self.left_value is None:\n                action = SyncAction.LEFT_SYNC\n            else:\n                action = SyncAction.RIGHT_SYNC\n        else:\n            action = SyncAction.NOTHING\n        return action\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync.ComparisonData.get_chosen_sync_option","title":"<code>get_chosen_sync_option()</code>","text":"<p>chosen sync action to apply to the compared property values Returns:     SyncAction: section to apply</p> Source code in <code>onlinespreadsheet/record_sync.py</code> <pre><code>def get_chosen_sync_option(self) -&gt; SyncAction:\n    \"\"\"\n    chosen sync action to apply to the compared property values\n    Returns:\n        SyncAction: section to apply\n    \"\"\"\n    if self.chosen_sync_option is not None:\n        action = self.chosen_sync_option\n    else:\n        action = self.suggested_sync_action()\n    return action\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync.ComparisonData.get_sync_status","title":"<code>get_sync_status()</code>","text":"<p>compare the left and right value and return their sync status</p> Source code in <code>onlinespreadsheet/record_sync.py</code> <pre><code>def get_sync_status(self):\n    \"\"\"\n    compare the left and right value and return their sync status\n    \"\"\"\n    status = None\n    if str(self.left_value) == str(self.right_value):\n        status = SyncStatus.IN_SYNC\n    elif self.left_value is None or self.right_value is None:\n        status = SyncStatus.SYNC_POSSIBLE\n    else:\n        status = SyncStatus.OUT_SYNC\n    return status\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync.ComparisonData.suggested_sync_action","title":"<code>suggested_sync_action()</code>","text":"<p>Evaluates the data difference and suggests a Sync Action</p> Source code in <code>onlinespreadsheet/record_sync.py</code> <pre><code>def suggested_sync_action(self) -&gt; SyncAction:\n    \"\"\"\n    Evaluates the data difference and suggests a Sync Action\n    \"\"\"\n    status = self.get_sync_status()\n    if status is SyncStatus.SYNC_POSSIBLE:\n        if self.left_value is None:\n            action = SyncAction.LEFT_SYNC\n        else:\n            action = SyncAction.RIGHT_SYNC\n    else:\n        action = SyncAction.NOTHING\n    return action\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync.ComparisonRecord","title":"<code>ComparisonRecord</code>","text":"<p>Compares two dicts</p> Source code in <code>onlinespreadsheet/record_sync.py</code> <pre><code>class ComparisonRecord:\n    \"\"\"\n    Compares two dicts\n    \"\"\"\n\n    def __init__(\n        self,\n        left_source_name: str,\n        left_record: dict,\n        right_source_name: str,\n        right_record: dict,\n    ):\n        \"\"\"\n        constructor\n        Args:\n            left_record: record to compare\n            right_record: record to compare\n        \"\"\"\n        self.left_source_name = left_source_name\n        self.right_source_name = right_source_name\n        if left_record is None:\n            left_record = dict()\n        if right_record is None:\n            right_record = dict()\n        self.comparison_data = dict()\n        property_names = []\n        for p in list(left_record.keys()) + list(right_record.keys()):\n            if p not in property_names:\n                property_names.append(p)\n        for property_name in property_names:\n            cd = ComparisonData(\n                property_name=property_name,\n                left_value=left_record.get(property_name, None),\n                right_value=right_record.get(property_name, None),\n            )\n            self.comparison_data[property_name] = cd\n\n    def get_update_records(self) -&gt; typing.Tuple[dict, dict]:\n        \"\"\"\n        Get the update records for both sides\n\n        Returns:\n            (dict, dict): updates that should be applied to both sides\n        \"\"\"\n        update_left = dict()\n        update_right = dict()\n        for cd in self.comparison_data.values():\n            action = cd.get_chosen_sync_option()\n            if action is SyncAction.LEFT_SYNC:\n                # right to left\n                update_left[cd.property_name] = cd.right_value\n            elif action is SyncAction.RIGHT_SYNC:\n                # left to right\n                update_right[cd.property_name] = cd.left_value\n        return update_left, update_right\n\n    def get_update_record_of(self, source_name: str) -&gt; dict:\n        \"\"\"\n        Get the update record for the given source name\n        Args:\n            source_name: name of one of the sources\n\n        Returns:\n            dict: update for the given source\n        \"\"\"\n        update_rec_left, update_rec_right = self.get_update_records()\n        update_record = dict()\n        if source_name == self.left_source_name:\n            update_record = update_rec_left\n        elif source_name == self.right_source_name:\n            update_record = update_rec_right\n        return update_record\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync.ComparisonRecord.__init__","title":"<code>__init__(left_source_name, left_record, right_source_name, right_record)</code>","text":"<p>constructor Args:     left_record: record to compare     right_record: record to compare</p> Source code in <code>onlinespreadsheet/record_sync.py</code> <pre><code>def __init__(\n    self,\n    left_source_name: str,\n    left_record: dict,\n    right_source_name: str,\n    right_record: dict,\n):\n    \"\"\"\n    constructor\n    Args:\n        left_record: record to compare\n        right_record: record to compare\n    \"\"\"\n    self.left_source_name = left_source_name\n    self.right_source_name = right_source_name\n    if left_record is None:\n        left_record = dict()\n    if right_record is None:\n        right_record = dict()\n    self.comparison_data = dict()\n    property_names = []\n    for p in list(left_record.keys()) + list(right_record.keys()):\n        if p not in property_names:\n            property_names.append(p)\n    for property_name in property_names:\n        cd = ComparisonData(\n            property_name=property_name,\n            left_value=left_record.get(property_name, None),\n            right_value=right_record.get(property_name, None),\n        )\n        self.comparison_data[property_name] = cd\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync.ComparisonRecord.get_update_record_of","title":"<code>get_update_record_of(source_name)</code>","text":"<p>Get the update record for the given source name Args:     source_name: name of one of the sources</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>update for the given source</p> Source code in <code>onlinespreadsheet/record_sync.py</code> <pre><code>def get_update_record_of(self, source_name: str) -&gt; dict:\n    \"\"\"\n    Get the update record for the given source name\n    Args:\n        source_name: name of one of the sources\n\n    Returns:\n        dict: update for the given source\n    \"\"\"\n    update_rec_left, update_rec_right = self.get_update_records()\n    update_record = dict()\n    if source_name == self.left_source_name:\n        update_record = update_rec_left\n    elif source_name == self.right_source_name:\n        update_record = update_rec_right\n    return update_record\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync.ComparisonRecord.get_update_records","title":"<code>get_update_records()</code>","text":"<p>Get the update records for both sides</p> <p>Returns:</p> Type Description <code>(dict, dict)</code> <p>updates that should be applied to both sides</p> Source code in <code>onlinespreadsheet/record_sync.py</code> <pre><code>def get_update_records(self) -&gt; typing.Tuple[dict, dict]:\n    \"\"\"\n    Get the update records for both sides\n\n    Returns:\n        (dict, dict): updates that should be applied to both sides\n    \"\"\"\n    update_left = dict()\n    update_right = dict()\n    for cd in self.comparison_data.values():\n        action = cd.get_chosen_sync_option()\n        if action is SyncAction.LEFT_SYNC:\n            # right to left\n            update_left[cd.property_name] = cd.right_value\n        elif action is SyncAction.RIGHT_SYNC:\n            # left to right\n            update_right[cd.property_name] = cd.left_value\n    return update_left, update_right\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync.SyncAction","title":"<code>SyncAction</code>","text":"<p>               Bases: <code>Enum</code></p> <p>synchronization action</p> Source code in <code>onlinespreadsheet/record_sync.py</code> <pre><code>class SyncAction(Enum):\n    \"\"\"\n    synchronization action\n    \"\"\"\n\n    LEFT_SYNC = \"\u2190\"\n    RIGHT_SYNC = \"\u2192\"\n    NOTHING = \"\"\n    SYNC = \"\u21c6\"\n\n    def __missing__(self, _key):\n        return self.NOTHING\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync.SyncRequest","title":"<code>SyncRequest</code>  <code>dataclass</code>","text":"<p>Synchronization request containing the sync action to apply and the corresponding data</p> Source code in <code>onlinespreadsheet/record_sync.py</code> <pre><code>@dataclass\nclass SyncRequest:\n    \"\"\"\n    Synchronization request containing the sync action to apply and the corresponding data\n    \"\"\"\n\n    action: SyncAction\n    data: ComparisonRecord\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync.SyncStatus","title":"<code>SyncStatus</code>","text":"<p>               Bases: <code>Enum</code></p> <p>synchronization status</p> Source code in <code>onlinespreadsheet/record_sync.py</code> <pre><code>class SyncStatus(Enum):\n    \"\"\"\n    synchronization status\n    \"\"\"\n\n    IN_SYNC = \"\u2713\"\n    SYNC_POSSIBLE = \"\"\n    OUT_SYNC = \"\u274c\"\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync_view","title":"<code>record_sync_view</code>","text":"<p>Created on 2024-03-18</p> <p>@author: wf</p>"},{"location":"#onlinespreadsheet.record_sync_view.SyncDialog","title":"<code>SyncDialog</code>","text":"<p>dialog widget to synchronize two data records</p> Source code in <code>onlinespreadsheet/record_sync_view.py</code> <pre><code>class SyncDialog:\n    \"\"\"\n    dialog widget to synchronize two data records\n    \"\"\"\n\n    def __init__(\n        self,\n        solution: InputWebSolution,\n        comparison_record: ComparisonRecord,\n        sync_callback: typing.Callable[[SyncRequest], None] = None,\n        value_enhancement_callback: typing.Callable[[\"SyncDialogRow\"], None] = None,\n    ):\n        \"\"\"\n        constructor\n        \"\"\"\n        self.solution = (solution,)\n        self.comparison_record = comparison_record\n        if sync_callback is None:\n            sync_callback = self.__fallback_sync_callback\n        self.sync_callback = sync_callback\n        self.rows = []\n        for cd in self.comparison_record.comparison_data.values():\n            sdr = SyncDialogRow(cd, a=self.table_body, classes=\"\")\n            self.rows.append(sdr)\n        self.value_enhancement_callback = value_enhancement_callback\n        self.enhance_row_values()\n\n    def setup_ui(self):\n        \"\"\" \"\"\"\n        self.setup_header()\n        self.setup_controls()\n\n    def setup_header(self):\n        \"\"\"\n        setup header column\n        \"\"\"\n        self.header = ui.html()\n        jp.Th(a=self.header, text=\"Property\")\n        jp.Th(a=self.header, text=self.comparison_record.left_source_name)\n        action_header = jp.Th(a=self.header, style=\"width:60px\")\n        color = \"grey\"\n        selector = EnumSelector(\n            enum=SyncAction,\n            exclude=[SyncAction.NOTHING],\n            a=action_header,\n            value=SyncAction.SYNC.name,\n            on_change=self.handle_sync_action_change,\n        )\n        jp.Th(a=self.header, text=self.comparison_record.right_source_name)\n\n    def setup_controls(self):\n        with ui.row() as self.button_row:\n            btn_sync_left = ui.button(\n                f\"update {self.comparison_record.left_source_name}\",\n                on_click=self.handle_sync_left_click,\n            ).style(\"btn-primary\")\n\n            btn_sync_both = ui.button(\n                \"update both\", on_click=self.handle_sync_click\n            ).style(\"btn-primary\")\n\n            btn_sync_right = ui.button(\n                f\"update {self.comparison_record.right_source_name}\",\n                on_click=self.handle_sync_right_click,\n            ).style(\"btn-primary\")\n\n    def handle_sync_action_change(self, msg):\n        \"\"\"\n        Handles change in selected global sync action\n        \"\"\"\n        global_action = SyncAction[msg.value]\n        for row in self.rows:\n            new_action = row.comparison_data.chosen_sync_option\n            if global_action in [SyncAction.LEFT_SYNC, SyncAction.RIGHT_SYNC]:\n                # apply selected sync action to all rows\n                new_action = global_action\n            elif global_action is SyncAction.SYNC:\n                new_action = row.comparison_data.suggested_sync_action()\n            row.comparison_data.chosen_sync_option = new_action\n            row.sync_action_selector.value = new_action.name\n\n    def handle_sync_left_click(self, _msg):\n        self.handover_sync_callback(SyncAction.LEFT_SYNC)\n\n    def handle_sync_right_click(self, _msg):\n        self.handover_sync_callback(SyncAction.RIGHT_SYNC)\n\n    def handle_sync_click(self, _msg):\n        self.handover_sync_callback(SyncAction.SYNC)\n\n    def handover_sync_callback(self, action: SyncAction):\n        \"\"\"\n        Generates the SyncRequest and hands it over to the defined callback function\n        Args:\n            action: sync action to apply\n        \"\"\"\n        sync_request = SyncRequest(action=action, data=self.comparison_record)\n        self.sync_callback(sync_request)\n\n    def __fallback_sync_callback(self, req: SyncRequest):\n        \"\"\"\n        Fallback Sync handler\n        \"\"\"\n        msg = f\"No synchronization callback defined {req}\"\n        print(msg)\n\n    def enhance_row_values(self):\n        \"\"\"\n        Enhance the row values\n        \"\"\"\n        for row in self.rows:\n            if self.value_enhancement_callback is not None:\n                self.value_enhancement_callback(row)\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync_view.SyncDialog.__fallback_sync_callback","title":"<code>__fallback_sync_callback(req)</code>","text":"<p>Fallback Sync handler</p> Source code in <code>onlinespreadsheet/record_sync_view.py</code> <pre><code>def __fallback_sync_callback(self, req: SyncRequest):\n    \"\"\"\n    Fallback Sync handler\n    \"\"\"\n    msg = f\"No synchronization callback defined {req}\"\n    print(msg)\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync_view.SyncDialog.__init__","title":"<code>__init__(solution, comparison_record, sync_callback=None, value_enhancement_callback=None)</code>","text":"<p>constructor</p> Source code in <code>onlinespreadsheet/record_sync_view.py</code> <pre><code>def __init__(\n    self,\n    solution: InputWebSolution,\n    comparison_record: ComparisonRecord,\n    sync_callback: typing.Callable[[SyncRequest], None] = None,\n    value_enhancement_callback: typing.Callable[[\"SyncDialogRow\"], None] = None,\n):\n    \"\"\"\n    constructor\n    \"\"\"\n    self.solution = (solution,)\n    self.comparison_record = comparison_record\n    if sync_callback is None:\n        sync_callback = self.__fallback_sync_callback\n    self.sync_callback = sync_callback\n    self.rows = []\n    for cd in self.comparison_record.comparison_data.values():\n        sdr = SyncDialogRow(cd, a=self.table_body, classes=\"\")\n        self.rows.append(sdr)\n    self.value_enhancement_callback = value_enhancement_callback\n    self.enhance_row_values()\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync_view.SyncDialog.enhance_row_values","title":"<code>enhance_row_values()</code>","text":"<p>Enhance the row values</p> Source code in <code>onlinespreadsheet/record_sync_view.py</code> <pre><code>def enhance_row_values(self):\n    \"\"\"\n    Enhance the row values\n    \"\"\"\n    for row in self.rows:\n        if self.value_enhancement_callback is not None:\n            self.value_enhancement_callback(row)\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync_view.SyncDialog.handle_sync_action_change","title":"<code>handle_sync_action_change(msg)</code>","text":"<p>Handles change in selected global sync action</p> Source code in <code>onlinespreadsheet/record_sync_view.py</code> <pre><code>def handle_sync_action_change(self, msg):\n    \"\"\"\n    Handles change in selected global sync action\n    \"\"\"\n    global_action = SyncAction[msg.value]\n    for row in self.rows:\n        new_action = row.comparison_data.chosen_sync_option\n        if global_action in [SyncAction.LEFT_SYNC, SyncAction.RIGHT_SYNC]:\n            # apply selected sync action to all rows\n            new_action = global_action\n        elif global_action is SyncAction.SYNC:\n            new_action = row.comparison_data.suggested_sync_action()\n        row.comparison_data.chosen_sync_option = new_action\n        row.sync_action_selector.value = new_action.name\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync_view.SyncDialog.handover_sync_callback","title":"<code>handover_sync_callback(action)</code>","text":"<p>Generates the SyncRequest and hands it over to the defined callback function Args:     action: sync action to apply</p> Source code in <code>onlinespreadsheet/record_sync_view.py</code> <pre><code>def handover_sync_callback(self, action: SyncAction):\n    \"\"\"\n    Generates the SyncRequest and hands it over to the defined callback function\n    Args:\n        action: sync action to apply\n    \"\"\"\n    sync_request = SyncRequest(action=action, data=self.comparison_record)\n    self.sync_callback(sync_request)\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync_view.SyncDialog.setup_header","title":"<code>setup_header()</code>","text":"<p>setup header column</p> Source code in <code>onlinespreadsheet/record_sync_view.py</code> <pre><code>def setup_header(self):\n    \"\"\"\n    setup header column\n    \"\"\"\n    self.header = ui.html()\n    jp.Th(a=self.header, text=\"Property\")\n    jp.Th(a=self.header, text=self.comparison_record.left_source_name)\n    action_header = jp.Th(a=self.header, style=\"width:60px\")\n    color = \"grey\"\n    selector = EnumSelector(\n        enum=SyncAction,\n        exclude=[SyncAction.NOTHING],\n        a=action_header,\n        value=SyncAction.SYNC.name,\n        on_change=self.handle_sync_action_change,\n    )\n    jp.Th(a=self.header, text=self.comparison_record.right_source_name)\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync_view.SyncDialog.setup_ui","title":"<code>setup_ui()</code>","text":"Source code in <code>onlinespreadsheet/record_sync_view.py</code> <pre><code>def setup_ui(self):\n    \"\"\" \"\"\"\n    self.setup_header()\n    self.setup_controls()\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync_view.SyncDialogRow","title":"<code>SyncDialogRow</code>","text":"<p>row in the SyncDialog</p> Source code in <code>onlinespreadsheet/record_sync_view.py</code> <pre><code>class SyncDialogRow:\n    \"\"\"\n    row in the SyncDialog\n    \"\"\"\n\n    def __init__(self, data: ComparisonData):\n        \"\"\"\n        constructor\n        Args:\n            data: data to compare/sync in this row\n        \"\"\"\n        self.comparison_data = data\n        row_color = self.get_row_color()\n        cell_classes = f\"border border-green-600 mx-2 my-1 p-2 {row_color}\"\n        self.property_name_div = jp.Td(\n            a=self, text=self.comparison_data.property_name, classes=cell_classes\n        )\n        self.left_value_div = jp.Td(\n            a=self, text=self.comparison_data.left_value, classes=cell_classes\n        )\n        self.sync_status_div = jp.Td(a=self, classes=cell_classes)\n        self.sync_action_selector = self.setup_sync_action_selector()\n        self.right_value_div = jp.Td(\n            a=self, text=self.comparison_data.right_value, classes=cell_classes\n        )\n        self.enhance_value_display()\n\n    def get_row_color(self):\n        \"\"\"\n        defines the row background color based on the sync status\n        \"\"\"\n        color = \"\"\n        status = self.comparison_data.get_sync_status()\n        if status is SyncStatus.IN_SYNC:\n            color = \"green\"\n        elif status is SyncStatus.OUT_SYNC:\n            color = \"red\"\n        intensity = 200\n        return f\"bg-{color}-{intensity}\"\n\n    def setup_sync_action_selector(self):\n        \"\"\"\n        setup sync action selector and choose default action based on the data\n        \"\"\"\n        # div = jp.Div(a=self.sync_status_div, classes=\"flex justify-end\")\n        # status_div = jp.Div(a=div, text=self.comparison_data.get_sync_status().value)\n        # color = \"grey\"\n        # selector = EnumSelector(\n        #    enum=SyncAction,\n        #    exclude=[SyncAction.SYNC],\n        #    a=div,\n        #    value=self.comparison_data.get_chosen_sync_option().name,\n        #    on_change=self.change_sync_action,\n        # )\n        selector = None\n        return selector\n\n    def change_sync_action(self, _msg):\n        \"\"\"\n        handle change in sync action\n        \"\"\"\n        new_action = SyncAction[self.sync_action_selector.value]\n        print(\n            f\"Changing sync action from {self.comparison_data.chosen_sync_option} to {new_action}\"\n        )\n        self.comparison_data.chosen_sync_option = new_action\n\n    def enhance_value_display(self):\n        \"\"\"\n        Enhances the displayed value\n        \"\"\"\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync_view.SyncDialogRow.__init__","title":"<code>__init__(data)</code>","text":"<p>constructor Args:     data: data to compare/sync in this row</p> Source code in <code>onlinespreadsheet/record_sync_view.py</code> <pre><code>def __init__(self, data: ComparisonData):\n    \"\"\"\n    constructor\n    Args:\n        data: data to compare/sync in this row\n    \"\"\"\n    self.comparison_data = data\n    row_color = self.get_row_color()\n    cell_classes = f\"border border-green-600 mx-2 my-1 p-2 {row_color}\"\n    self.property_name_div = jp.Td(\n        a=self, text=self.comparison_data.property_name, classes=cell_classes\n    )\n    self.left_value_div = jp.Td(\n        a=self, text=self.comparison_data.left_value, classes=cell_classes\n    )\n    self.sync_status_div = jp.Td(a=self, classes=cell_classes)\n    self.sync_action_selector = self.setup_sync_action_selector()\n    self.right_value_div = jp.Td(\n        a=self, text=self.comparison_data.right_value, classes=cell_classes\n    )\n    self.enhance_value_display()\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync_view.SyncDialogRow.change_sync_action","title":"<code>change_sync_action(_msg)</code>","text":"<p>handle change in sync action</p> Source code in <code>onlinespreadsheet/record_sync_view.py</code> <pre><code>def change_sync_action(self, _msg):\n    \"\"\"\n    handle change in sync action\n    \"\"\"\n    new_action = SyncAction[self.sync_action_selector.value]\n    print(\n        f\"Changing sync action from {self.comparison_data.chosen_sync_option} to {new_action}\"\n    )\n    self.comparison_data.chosen_sync_option = new_action\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync_view.SyncDialogRow.enhance_value_display","title":"<code>enhance_value_display()</code>","text":"<p>Enhances the displayed value</p> Source code in <code>onlinespreadsheet/record_sync_view.py</code> <pre><code>def enhance_value_display(self):\n    \"\"\"\n    Enhances the displayed value\n    \"\"\"\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync_view.SyncDialogRow.get_row_color","title":"<code>get_row_color()</code>","text":"<p>defines the row background color based on the sync status</p> Source code in <code>onlinespreadsheet/record_sync_view.py</code> <pre><code>def get_row_color(self):\n    \"\"\"\n    defines the row background color based on the sync status\n    \"\"\"\n    color = \"\"\n    status = self.comparison_data.get_sync_status()\n    if status is SyncStatus.IN_SYNC:\n        color = \"green\"\n    elif status is SyncStatus.OUT_SYNC:\n        color = \"red\"\n    intensity = 200\n    return f\"bg-{color}-{intensity}\"\n</code></pre>"},{"location":"#onlinespreadsheet.record_sync_view.SyncDialogRow.setup_sync_action_selector","title":"<code>setup_sync_action_selector()</code>","text":"<p>setup sync action selector and choose default action based on the data</p> Source code in <code>onlinespreadsheet/record_sync_view.py</code> <pre><code>def setup_sync_action_selector(self):\n    \"\"\"\n    setup sync action selector and choose default action based on the data\n    \"\"\"\n    # div = jp.Div(a=self.sync_status_div, classes=\"flex justify-end\")\n    # status_div = jp.Div(a=div, text=self.comparison_data.get_sync_status().value)\n    # color = \"grey\"\n    # selector = EnumSelector(\n    #    enum=SyncAction,\n    #    exclude=[SyncAction.SYNC],\n    #    a=div,\n    #    value=self.comparison_data.get_chosen_sync_option().name,\n    #    on_change=self.change_sync_action,\n    # )\n    selector = None\n    return selector\n</code></pre>"},{"location":"#onlinespreadsheet.spreadsheet_view","title":"<code>spreadsheet_view</code>","text":"<p>Created on 2024-03-19</p> <p>@author: wf</p>"},{"location":"#onlinespreadsheet.spreadsheet_view.SpreadSheetView","title":"<code>SpreadSheetView</code>","text":"<p>shows a Spreadsheet</p> Source code in <code>onlinespreadsheet/spreadsheet_view.py</code> <pre><code>class SpreadSheetView:\n    \"\"\"\n    shows a Spreadsheet\n    \"\"\"\n\n    def __init__(self, solution):\n        self.solution = solution\n        self.debug = self.solution.debug\n        self.args = solution.args\n        self.url = self.args.url\n        self.sheetNames = self.args.sheets\n        if len(self.sheetNames) &lt; 1:\n            raise Exception(\"need at least one sheetName in sheets argument\")\n        self.sheetName = self.sheetNames[0]\n        self.mappingSheetName = self.args.mappingSheet\n        self.endpoint = self.args.endpoint\n        self.sparql = SPARQL(self.endpoint)\n        self.lang = self.args.lang\n        self.setup_ui()\n        # self.grid_sync=GridSync()\n\n    def setup_ui(self):\n        \"\"\"\n        setup my user interface\n        \"\"\"\n        with ui.row() as self.log_row:\n            self.log_view = ui.html()\n        with ui.row() as self.input_row:\n            url_label_text = \"Google Spreadsheet Url\"\n            ui.label(url_label_text)\n            ui.input(\n                value=self.url,\n                placeholder=f\"Enter new {url_label_text}\",\n                on_change=self.on_change_url,\n            )\n            ui.button(\"reload\", on_click=self.reload)\n        with ui.row() as self.grid_row:\n            self.lod_grid = ListOfDictsGrid()\n\n        # ui.timer(0, self.reload, once=True)\n\n    def load_items_from_selected_sheet(self) -&gt; List[dict]:\n        \"\"\"\n        Extract the records from the selected sheet and returns them as LoD\n\n        Returns:\n            List of dicts containing the sheet content\n        \"\"\"\n\n        self.wbQueries = GoogleSheet.toWikibaseQuery(\n            self.url, self.mappingSheetName, debug=self.debug\n        )\n        if len(self.wbQueries) == 0:\n            print(\n                f\"Warning Wikidata mapping sheet {self.mappingSheetName} not defined!\"\n            )\n        self.gs = GoogleSheet(self.url)\n        self.gs.open([self.sheetName])\n        items = self.gs.asListOfDicts(self.sheetName)\n        wbQuery = self.wbQueries.get(self.sheetName, None)\n        # self.gridSync.wbQuery = wbQuery\n        return items\n\n    def load_sheet(self):\n        \"\"\"\n        load sheet in background\n        \"\"\"\n        with self.solution.content_div:\n            try:\n                items = self.load_items_from_selected_sheet()\n                self.lod_grid.load_lod(items)\n                ui.notify(f\"loaded {len(items)} items\")\n                self.lod_grid.update()\n            except Exception as ex:\n                self.solution.handle_exception(ex)\n\n    async def reload(self):\n        \"\"\"\n        reload my spreadsheet\n        \"\"\"\n        try:\n            link = Link.create(self.url, self.sheetNames[0])\n            self.log_view.content = (\n                f\"{link}&lt;br&gt;{self.lang} {self.endpoint} {self.sheetNames}\"\n            )\n            await run.io_bound(self.load_sheet)\n        except Exception as ex:\n            self.solution.handle_exception(ex)\n\n    async def on_change_url(self, args):\n        \"\"\"\n        handle selection of a different url\n        \"\"\"\n        self.url = args.value\n        await self.reload()\n        pass\n</code></pre>"},{"location":"#onlinespreadsheet.spreadsheet_view.SpreadSheetView.load_items_from_selected_sheet","title":"<code>load_items_from_selected_sheet()</code>","text":"<p>Extract the records from the selected sheet and returns them as LoD</p> <p>Returns:</p> Type Description <code>List[dict]</code> <p>List of dicts containing the sheet content</p> Source code in <code>onlinespreadsheet/spreadsheet_view.py</code> <pre><code>def load_items_from_selected_sheet(self) -&gt; List[dict]:\n    \"\"\"\n    Extract the records from the selected sheet and returns them as LoD\n\n    Returns:\n        List of dicts containing the sheet content\n    \"\"\"\n\n    self.wbQueries = GoogleSheet.toWikibaseQuery(\n        self.url, self.mappingSheetName, debug=self.debug\n    )\n    if len(self.wbQueries) == 0:\n        print(\n            f\"Warning Wikidata mapping sheet {self.mappingSheetName} not defined!\"\n        )\n    self.gs = GoogleSheet(self.url)\n    self.gs.open([self.sheetName])\n    items = self.gs.asListOfDicts(self.sheetName)\n    wbQuery = self.wbQueries.get(self.sheetName, None)\n    # self.gridSync.wbQuery = wbQuery\n    return items\n</code></pre>"},{"location":"#onlinespreadsheet.spreadsheet_view.SpreadSheetView.load_sheet","title":"<code>load_sheet()</code>","text":"<p>load sheet in background</p> Source code in <code>onlinespreadsheet/spreadsheet_view.py</code> <pre><code>def load_sheet(self):\n    \"\"\"\n    load sheet in background\n    \"\"\"\n    with self.solution.content_div:\n        try:\n            items = self.load_items_from_selected_sheet()\n            self.lod_grid.load_lod(items)\n            ui.notify(f\"loaded {len(items)} items\")\n            self.lod_grid.update()\n        except Exception as ex:\n            self.solution.handle_exception(ex)\n</code></pre>"},{"location":"#onlinespreadsheet.spreadsheet_view.SpreadSheetView.on_change_url","title":"<code>on_change_url(args)</code>  <code>async</code>","text":"<p>handle selection of a different url</p> Source code in <code>onlinespreadsheet/spreadsheet_view.py</code> <pre><code>async def on_change_url(self, args):\n    \"\"\"\n    handle selection of a different url\n    \"\"\"\n    self.url = args.value\n    await self.reload()\n    pass\n</code></pre>"},{"location":"#onlinespreadsheet.spreadsheet_view.SpreadSheetView.reload","title":"<code>reload()</code>  <code>async</code>","text":"<p>reload my spreadsheet</p> Source code in <code>onlinespreadsheet/spreadsheet_view.py</code> <pre><code>async def reload(self):\n    \"\"\"\n    reload my spreadsheet\n    \"\"\"\n    try:\n        link = Link.create(self.url, self.sheetNames[0])\n        self.log_view.content = (\n            f\"{link}&lt;br&gt;{self.lang} {self.endpoint} {self.sheetNames}\"\n        )\n        await run.io_bound(self.load_sheet)\n    except Exception as ex:\n        self.solution.handle_exception(ex)\n</code></pre>"},{"location":"#onlinespreadsheet.spreadsheet_view.SpreadSheetView.setup_ui","title":"<code>setup_ui()</code>","text":"<p>setup my user interface</p> Source code in <code>onlinespreadsheet/spreadsheet_view.py</code> <pre><code>def setup_ui(self):\n    \"\"\"\n    setup my user interface\n    \"\"\"\n    with ui.row() as self.log_row:\n        self.log_view = ui.html()\n    with ui.row() as self.input_row:\n        url_label_text = \"Google Spreadsheet Url\"\n        ui.label(url_label_text)\n        ui.input(\n            value=self.url,\n            placeholder=f\"Enter new {url_label_text}\",\n            on_change=self.on_change_url,\n        )\n        ui.button(\"reload\", on_click=self.reload)\n    with ui.row() as self.grid_row:\n        self.lod_grid = ListOfDictsGrid()\n</code></pre>"},{"location":"#onlinespreadsheet.tablequery","title":"<code>tablequery</code>","text":"<p>Created on 2021-12-09</p> <p>@author: wf</p>"},{"location":"#onlinespreadsheet.tablequery.QueryType","title":"<code>QueryType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Query type</p> Source code in <code>onlinespreadsheet/tablequery.py</code> <pre><code>class QueryType(Enum):\n    \"\"\"\n    Query type\n    \"\"\"\n\n    SQL = auto()\n    RESTful = auto()\n    ASK = auto()\n    SPARQL = auto()\n    INVALID = auto()\n\n    @staticmethod\n    def match(pattern: str, string: str):\n        \"\"\"\n        re match search for the given pattern with ignore case\n        \"\"\"\n        return re.search(pattern=pattern, string=string, flags=re.IGNORECASE)\n</code></pre>"},{"location":"#onlinespreadsheet.tablequery.QueryType.match","title":"<code>match(pattern, string)</code>  <code>staticmethod</code>","text":"<p>re match search for the given pattern with ignore case</p> Source code in <code>onlinespreadsheet/tablequery.py</code> <pre><code>@staticmethod\ndef match(pattern: str, string: str):\n    \"\"\"\n    re match search for the given pattern with ignore case\n    \"\"\"\n    return re.search(pattern=pattern, string=string, flags=re.IGNORECASE)\n</code></pre>"},{"location":"#onlinespreadsheet.tablequery.SmwWikiAccess","title":"<code>SmwWikiAccess</code>","text":"<p>Access to Semantic MediaWiki</p> Source code in <code>onlinespreadsheet/tablequery.py</code> <pre><code>class SmwWikiAccess:\n    \"\"\"\n    Access to Semantic MediaWiki\n    \"\"\"\n\n    # TODO move to general project\n\n    def __init__(\n        self,\n        wikiId: str,\n        showProgress=False,\n        queryDivision=1,\n        debug=False,\n        lenient=True,\n    ):\n        \"\"\"\n        constructor\n        \"\"\"\n        self.debug = debug\n        self.wikiUser = WikiUser.ofWikiId(wikiId, lenient=lenient)\n        self.wikiClient = WikiClient.ofWikiUser(self.wikiUser)\n        self.smwClient = SMWClient(\n            self.wikiClient.getSite(),\n            showProgress=showProgress,\n            queryDivision=queryDivision,\n            debug=self.debug,\n        )\n        # self.wikiPush = WikiPush(fromWikiId=self.wikiUser.wikiId)\n\n    def login(self):\n        self.wikiClient.login()\n\n    def query(self, query: str):\n        \"\"\"\n        query with auto-login\n        \"\"\"\n        try:\n            qres = self.smwClient.query(query)\n        except APIError as apie:\n            if \"readapidenied\" in str(apie):\n                # retry with login\n                self.login()\n                qres = self.smwClient.query(query)\n            else:\n                raise apie\n        return qres\n</code></pre>"},{"location":"#onlinespreadsheet.tablequery.SmwWikiAccess.__init__","title":"<code>__init__(wikiId, showProgress=False, queryDivision=1, debug=False, lenient=True)</code>","text":"<p>constructor</p> Source code in <code>onlinespreadsheet/tablequery.py</code> <pre><code>def __init__(\n    self,\n    wikiId: str,\n    showProgress=False,\n    queryDivision=1,\n    debug=False,\n    lenient=True,\n):\n    \"\"\"\n    constructor\n    \"\"\"\n    self.debug = debug\n    self.wikiUser = WikiUser.ofWikiId(wikiId, lenient=lenient)\n    self.wikiClient = WikiClient.ofWikiUser(self.wikiUser)\n    self.smwClient = SMWClient(\n        self.wikiClient.getSite(),\n        showProgress=showProgress,\n        queryDivision=queryDivision,\n        debug=self.debug,\n    )\n</code></pre>"},{"location":"#onlinespreadsheet.tablequery.SmwWikiAccess.query","title":"<code>query(query)</code>","text":"<p>query with auto-login</p> Source code in <code>onlinespreadsheet/tablequery.py</code> <pre><code>def query(self, query: str):\n    \"\"\"\n    query with auto-login\n    \"\"\"\n    try:\n        qres = self.smwClient.query(query)\n    except APIError as apie:\n        if \"readapidenied\" in str(apie):\n            # retry with login\n            self.login()\n            qres = self.smwClient.query(query)\n        else:\n            raise apie\n    return qres\n</code></pre>"},{"location":"#onlinespreadsheet.tablequery.TableQuery","title":"<code>TableQuery</code>","text":"<p>               Bases: <code>object</code></p> <p>prepare a Spreadsheet editing</p> Source code in <code>onlinespreadsheet/tablequery.py</code> <pre><code>class TableQuery(object):\n    \"\"\"\n    prepare a Spreadsheet editing\n    \"\"\"\n\n    def __init__(self, debug=False):\n        \"\"\"\n        Constructor\n        \"\"\"\n        self.debug = debug\n        self.wikiAccessMap = {}\n        self.queries = {}\n        self.tableEditing = TableEditing()\n        self.errors = []\n\n    def addQuery(self, query: Query):\n        \"\"\"\n        add the query with the given name to my queries\n\n        query(Query): the query to add\n        \"\"\"\n        self.queries[query.name] = query\n\n    def fetchQueryResults(self):\n        \"\"\"\n        fetch the QueryResults\n\n        \"\"\"\n        for queryName, query in self.queries.items():\n            qres = None\n            if query.lang == \"ask\":\n                if not hasattr(query, \"wikiAccess\") or query.wikiAccess is None:\n                    raise (\n                        f\"wikiAccess needs to be configured for Semantic MediaWiki ask query '{query.name}'\"\n                    )\n                qres = query.wikiAccess.query(query.query)\n                # workaround: undict if dict of dict is returned\n                # TODO: check whether this may be fixed upstream\n                if isinstance(qres, dict):\n                    qres = list(qres.values())\n            elif query.lang.lower() == \"sparql\":\n                if not hasattr(query, \"endpoint\") or query.endpoint is None:\n                    raise (\n                        f\"endpoint needs to be configured for SPARQL query '{query.name}'\"\n                    )\n                qres = query.endpoint.queryAsListOfDicts(query.query)\n            elif query.lang.lower() == \"restful\":\n                response = requests.request(\"GET\", query.query)\n                if response.status_code == 200:\n                    qres = response.json()\n                else:\n                    self.errors.append(\n                        f\"{query.query} failed with status {response.status_code}\"\n                    )\n            if qres is not None:\n                if isinstance(qres, list):\n                    self.tableEditing.addLoD(query.name, qres)\n                elif isinstance(qres, dict):\n                    for name, lod in qres.items():\n                        self.tableEditing.addLoD(f\"{queryName}_{name}\", lod)\n\n    def addAskQuery(\n        self, wikiId: str, name, ask: str, title: str = None, description: str = None\n    ):\n        \"\"\"\n        add an ask query for the given wiki\n\n        Args:\n              wikiId(str): the id of the wiki to add\n              name(str): the name of the query to add\n              ask(str): the SMW ask query\n              title(str): the title of the query\n              description(str): the description of the query\n        \"\"\"\n        if wikiId not in self.wikiAccessMap:\n            self.wikiAccessMap[wikiId] = SmwWikiAccess(wikiId)\n        wikiAccess = self.wikiAccessMap[wikiId]\n        query = Query(\n            name=name,\n            query=ask,\n            lang=\"ask\",\n            title=title,\n            description=description,\n            debug=self.debug,\n        )\n        query.wikiAccess = wikiAccess\n        self.addQuery(query)\n\n    def fromAskQueries(self, wikiId: str, askQueries: list, withFetch: bool = True):\n        \"\"\"\n        initialize me from the given Queries\n        \"\"\"\n        for askQuery in askQueries:\n            name = askQuery[\"name\"]\n            ask = askQuery[\"ask\"]\n            title = askQuery[\"title\"] if \"title\" in askQuery else None\n            description = askQuery[\"description\"] if \"description\" in askQuery else None\n            self.addAskQuery(wikiId, name, ask, title, description)\n        if withFetch:\n            self.fetchQueryResults()\n\n    def addRESTfulQuery(\n        self, name: str, url: str, title: str = None, description: str = None\n    ):\n        \"\"\"\n        add RESTFful query to the queries\n\n        Args:\n            url(str): RESTful query URL optionally with parameters\n            name(str): name of the query\n            title(str): title of the query\n            description(str): description of the query\n        \"\"\"\n        query = Query(\n            name=name,\n            query=url,\n            lang=\"restful\",\n            title=title,\n            description=description,\n            debug=self.debug,\n        )\n        self.addQuery(query)\n\n    def addSparqlQuery(\n        self,\n        name: str,\n        query: str,\n        endpointUrl: str = \"https://query.wikidata.org/sparql\",\n        title: str = None,\n        description: str = None,\n    ):\n        \"\"\"\n        add SPARQL query to the queries\n\n        Args:\n            name(str): name of the query\n            query(str): the SPARQL query to execute\n            endpointUrl(str): the url of the endpoint to use\n            title(str): title of the query\n            description(str): description of the query\n        \"\"\"\n        query = Query(\n            name=name,\n            query=query,\n            lang=\"sparql\",\n            title=title,\n            description=description,\n            debug=self.debug,\n        )\n        query.endpoint = SPARQL(endpointUrl)\n        self.addQuery(query)\n\n    @staticmethod\n    def guessQueryType(query: str) -&gt; Optional[QueryType]:\n        \"\"\"\n        Tries to guess the query type of the given query\n\n        Args:\n            query(str): query\n\n        Returns:\n            QueryType\n        \"\"\"\n        query = query.lower().strip()\n        if query.startswith(\"http\"):\n            return QueryType.RESTful\n        elif query.startswith(\"{{#ask:\"):\n            return QueryType.ASK\n        elif (\n            QueryType.match(r\"prefix\", query)\n            or QueryType.match(r\"\\s*select\\s+\\?\", query)\n        ) or QueryType.match(r\"#.*SPARQL\", query):\n            return QueryType.SPARQL\n        elif QueryType.match(r\"\\s*select\", query) and QueryType.match(\n            r\"\\s*from\\s+\", query\n        ):\n            return QueryType.SQL\n        else:\n            return QueryType.INVALID\n</code></pre>"},{"location":"#onlinespreadsheet.tablequery.TableQuery.__init__","title":"<code>__init__(debug=False)</code>","text":"<p>Constructor</p> Source code in <code>onlinespreadsheet/tablequery.py</code> <pre><code>def __init__(self, debug=False):\n    \"\"\"\n    Constructor\n    \"\"\"\n    self.debug = debug\n    self.wikiAccessMap = {}\n    self.queries = {}\n    self.tableEditing = TableEditing()\n    self.errors = []\n</code></pre>"},{"location":"#onlinespreadsheet.tablequery.TableQuery.addAskQuery","title":"<code>addAskQuery(wikiId, name, ask, title=None, description=None)</code>","text":"<p>add an ask query for the given wiki</p> <p>Parameters:</p> Name Type Description Default <code>wikiId(str)</code> <p>the id of the wiki to add</p> required <code>name(str)</code> <p>the name of the query to add</p> required <code>ask(str)</code> <p>the SMW ask query</p> required <code>title(str)</code> <p>the title of the query</p> required <code>description(str)</code> <p>the description of the query</p> required Source code in <code>onlinespreadsheet/tablequery.py</code> <pre><code>def addAskQuery(\n    self, wikiId: str, name, ask: str, title: str = None, description: str = None\n):\n    \"\"\"\n    add an ask query for the given wiki\n\n    Args:\n          wikiId(str): the id of the wiki to add\n          name(str): the name of the query to add\n          ask(str): the SMW ask query\n          title(str): the title of the query\n          description(str): the description of the query\n    \"\"\"\n    if wikiId not in self.wikiAccessMap:\n        self.wikiAccessMap[wikiId] = SmwWikiAccess(wikiId)\n    wikiAccess = self.wikiAccessMap[wikiId]\n    query = Query(\n        name=name,\n        query=ask,\n        lang=\"ask\",\n        title=title,\n        description=description,\n        debug=self.debug,\n    )\n    query.wikiAccess = wikiAccess\n    self.addQuery(query)\n</code></pre>"},{"location":"#onlinespreadsheet.tablequery.TableQuery.addQuery","title":"<code>addQuery(query)</code>","text":"<p>add the query with the given name to my queries</p> <p>query(Query): the query to add</p> Source code in <code>onlinespreadsheet/tablequery.py</code> <pre><code>def addQuery(self, query: Query):\n    \"\"\"\n    add the query with the given name to my queries\n\n    query(Query): the query to add\n    \"\"\"\n    self.queries[query.name] = query\n</code></pre>"},{"location":"#onlinespreadsheet.tablequery.TableQuery.addRESTfulQuery","title":"<code>addRESTfulQuery(name, url, title=None, description=None)</code>","text":"<p>add RESTFful query to the queries</p> <p>Parameters:</p> Name Type Description Default <code>url(str)</code> <p>RESTful query URL optionally with parameters</p> required <code>name(str)</code> <p>name of the query</p> required <code>title(str)</code> <p>title of the query</p> required <code>description(str)</code> <p>description of the query</p> required Source code in <code>onlinespreadsheet/tablequery.py</code> <pre><code>def addRESTfulQuery(\n    self, name: str, url: str, title: str = None, description: str = None\n):\n    \"\"\"\n    add RESTFful query to the queries\n\n    Args:\n        url(str): RESTful query URL optionally with parameters\n        name(str): name of the query\n        title(str): title of the query\n        description(str): description of the query\n    \"\"\"\n    query = Query(\n        name=name,\n        query=url,\n        lang=\"restful\",\n        title=title,\n        description=description,\n        debug=self.debug,\n    )\n    self.addQuery(query)\n</code></pre>"},{"location":"#onlinespreadsheet.tablequery.TableQuery.addSparqlQuery","title":"<code>addSparqlQuery(name, query, endpointUrl='https://query.wikidata.org/sparql', title=None, description=None)</code>","text":"<p>add SPARQL query to the queries</p> <p>Parameters:</p> Name Type Description Default <code>name(str)</code> <p>name of the query</p> required <code>query(str)</code> <p>the SPARQL query to execute</p> required <code>endpointUrl(str)</code> <p>the url of the endpoint to use</p> required <code>title(str)</code> <p>title of the query</p> required <code>description(str)</code> <p>description of the query</p> required Source code in <code>onlinespreadsheet/tablequery.py</code> <pre><code>def addSparqlQuery(\n    self,\n    name: str,\n    query: str,\n    endpointUrl: str = \"https://query.wikidata.org/sparql\",\n    title: str = None,\n    description: str = None,\n):\n    \"\"\"\n    add SPARQL query to the queries\n\n    Args:\n        name(str): name of the query\n        query(str): the SPARQL query to execute\n        endpointUrl(str): the url of the endpoint to use\n        title(str): title of the query\n        description(str): description of the query\n    \"\"\"\n    query = Query(\n        name=name,\n        query=query,\n        lang=\"sparql\",\n        title=title,\n        description=description,\n        debug=self.debug,\n    )\n    query.endpoint = SPARQL(endpointUrl)\n    self.addQuery(query)\n</code></pre>"},{"location":"#onlinespreadsheet.tablequery.TableQuery.fetchQueryResults","title":"<code>fetchQueryResults()</code>","text":"<p>fetch the QueryResults</p> Source code in <code>onlinespreadsheet/tablequery.py</code> <pre><code>def fetchQueryResults(self):\n    \"\"\"\n    fetch the QueryResults\n\n    \"\"\"\n    for queryName, query in self.queries.items():\n        qres = None\n        if query.lang == \"ask\":\n            if not hasattr(query, \"wikiAccess\") or query.wikiAccess is None:\n                raise (\n                    f\"wikiAccess needs to be configured for Semantic MediaWiki ask query '{query.name}'\"\n                )\n            qres = query.wikiAccess.query(query.query)\n            # workaround: undict if dict of dict is returned\n            # TODO: check whether this may be fixed upstream\n            if isinstance(qres, dict):\n                qres = list(qres.values())\n        elif query.lang.lower() == \"sparql\":\n            if not hasattr(query, \"endpoint\") or query.endpoint is None:\n                raise (\n                    f\"endpoint needs to be configured for SPARQL query '{query.name}'\"\n                )\n            qres = query.endpoint.queryAsListOfDicts(query.query)\n        elif query.lang.lower() == \"restful\":\n            response = requests.request(\"GET\", query.query)\n            if response.status_code == 200:\n                qres = response.json()\n            else:\n                self.errors.append(\n                    f\"{query.query} failed with status {response.status_code}\"\n                )\n        if qres is not None:\n            if isinstance(qres, list):\n                self.tableEditing.addLoD(query.name, qres)\n            elif isinstance(qres, dict):\n                for name, lod in qres.items():\n                    self.tableEditing.addLoD(f\"{queryName}_{name}\", lod)\n</code></pre>"},{"location":"#onlinespreadsheet.tablequery.TableQuery.fromAskQueries","title":"<code>fromAskQueries(wikiId, askQueries, withFetch=True)</code>","text":"<p>initialize me from the given Queries</p> Source code in <code>onlinespreadsheet/tablequery.py</code> <pre><code>def fromAskQueries(self, wikiId: str, askQueries: list, withFetch: bool = True):\n    \"\"\"\n    initialize me from the given Queries\n    \"\"\"\n    for askQuery in askQueries:\n        name = askQuery[\"name\"]\n        ask = askQuery[\"ask\"]\n        title = askQuery[\"title\"] if \"title\" in askQuery else None\n        description = askQuery[\"description\"] if \"description\" in askQuery else None\n        self.addAskQuery(wikiId, name, ask, title, description)\n    if withFetch:\n        self.fetchQueryResults()\n</code></pre>"},{"location":"#onlinespreadsheet.tablequery.TableQuery.guessQueryType","title":"<code>guessQueryType(query)</code>  <code>staticmethod</code>","text":"<p>Tries to guess the query type of the given query</p> <p>Parameters:</p> Name Type Description Default <code>query(str)</code> <p>query</p> required <p>Returns:</p> Type Description <code>Optional[QueryType]</code> <p>QueryType</p> Source code in <code>onlinespreadsheet/tablequery.py</code> <pre><code>@staticmethod\ndef guessQueryType(query: str) -&gt; Optional[QueryType]:\n    \"\"\"\n    Tries to guess the query type of the given query\n\n    Args:\n        query(str): query\n\n    Returns:\n        QueryType\n    \"\"\"\n    query = query.lower().strip()\n    if query.startswith(\"http\"):\n        return QueryType.RESTful\n    elif query.startswith(\"{{#ask:\"):\n        return QueryType.ASK\n    elif (\n        QueryType.match(r\"prefix\", query)\n        or QueryType.match(r\"\\s*select\\s+\\?\", query)\n    ) or QueryType.match(r\"#.*SPARQL\", query):\n        return QueryType.SPARQL\n    elif QueryType.match(r\"\\s*select\", query) and QueryType.match(\n        r\"\\s*from\\s+\", query\n    ):\n        return QueryType.SQL\n    else:\n        return QueryType.INVALID\n</code></pre>"},{"location":"#onlinespreadsheet.version","title":"<code>version</code>","text":"<p>Created on 2022-03-06</p> <p>@author: wf</p>"},{"location":"#onlinespreadsheet.version.Version","title":"<code>Version</code>  <code>dataclass</code>","text":"<p>Version handling for pyOnlineSpreadsheetEditing</p> Source code in <code>onlinespreadsheet/version.py</code> <pre><code>@dataclass\nclass Version:\n    \"\"\"\n    Version handling for pyOnlineSpreadsheetEditing\n    \"\"\"\n\n    name = \"pyOnlineSpreadsheetEditing\"\n    version = onlinespreadsheet.__version__\n    date = \"2021-12-11\"\n    updated = \"2024-08-22\"\n    description = \"python Online SpreadSheet Editing tool with configurable enhancer/importer and check phase\"\n    authors = \"Wolfgang Fahl/Tim Holzheim\"\n    doc_url = \"https://wiki.bitplan.com/index.php/PyOnlineSpreadSheetEditing\"\n    chat_url = \"https://github.com/WolfgangFahl/pyOnlineSpreadSheetEditing/discussions\"\n    cm_url = \"https://github.com/WolfgangFahl/pyOnlineSpreadSheetEditing\"\n\n    license = f\"\"\"Copyright 2021-2024 contributors. All rights reserved.\n\n  Licensed under the Apache License 2.0\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Distributed on an \"AS IS\" basis without warranties\n  or conditions of any kind, either express or implied.\"\"\"\n    longDescription = f\"\"\"{name} version {version}\n{description}\n\n  Created by {authors} on {date} last updated {updated}\"\"\"\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid","title":"<code>wdgrid</code>","text":"<p>Created on 2023-01-11</p> <p>@author: wf</p>"},{"location":"#onlinespreadsheet.wdgrid.GridSync","title":"<code>GridSync</code>","text":"<p>allow syncing the grid with data from wikibase</p> Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>class GridSync:\n    \"\"\"\n    allow syncing the grid with data from wikibase\n    \"\"\"\n\n    def __init__(\n        self,\n        wdgrid: WikidataGrid,\n        entityName: str,\n        pk: str,\n        sparql: SPARQL,\n        debug: bool = False,\n    ):\n        \"\"\"\n        constructor\n\n        Args:\n            wdgrid(WikiDataGrid): the wikidata grid to use\n            entityName: name of the sheet\n            pk: primary key\n            sparql(SPARQL): the sparql endpoint access to use\n            debug(bool): if True show debug information\n        \"\"\"\n        self.wdgrid = wdgrid\n        self.app = wdgrid.app\n        self.entityName = entityName\n        self.pk = pk\n        self.sparql = sparql\n        self.debug = debug\n        self.wdgrid.additional_reload_callback = self.setup_aggrid_post_reload\n        self.wdgrid.row_selected_callback = self.handle_row_selected\n        self.wbQuery = None\n\n    def loadItems(self):\n        # we assume the grid has already been loaded here\n        self.itemRows = self.wdgrid.lod\n        self.pkColumn, self.pkType, self.pkProp = self.getColumnTypeAndVarname(self.pk)\n        self.itemsByPk, _dup = LOD.getLookup(self.itemRows, self.pkColumn)\n        if self.debug:\n            print(f\"{self.entityName} by {self.pkColumn}:{list(self.itemsByPk.keys())}\")\n            pass\n\n    def setup(self, a, header):\n        \"\"\"\n        initialize my components\n\n        Args:\n            a(HtmlComponent): the parent component\n            header(HtmlComponent): the header for the primary key selector\n\n        \"\"\"\n        selectorClasses = \"w-32 m-2 p-2 bg-white\"\n        self.toolbar = self.app.jp.QToolbar(a=a, classes=\"flex flex-row gap-2\")\n        # for icons see  https://quasar.dev/vue-components/icon\n        # see justpy/templates/local/materialdesignicons/iconfont/codepoints for available icons\n        self.reloadButton = IconButton(\n            a=self.toolbar,\n            text=\"\",\n            title=\"reload\",\n            iconName=\"refresh-circle\",\n            click=self.wdgrid.reload,\n            classes=\"btn btn-primary btn-sm col-1\",\n        )\n        self.checkButton = IconButton(\n            a=self.toolbar,\n            text=\"\",\n            title=\"check\",\n            iconName=\"check\",\n            click=self.onCheckWikidata,\n            classes=\"btn btn-primary btn-sm col-1\",\n        )\n        self.loginButton = IconButton(\n            a=self.toolbar,\n            title=\"login\",\n            iconName=\"login\",\n            text=\"\",\n            click=self.onLogin,\n            classes=\"btn btn-primary btn-sm col-1\",\n        )\n        self.passwordDialog = QPasswordDialog(a=self.app.wp)\n        # selector for column/property\n        self.pkSelect = self.app.jp.Select(\n            classes=selectorClasses, a=header, value=self.pk, change=self.onChangePk\n        )\n\n    def setup_aggrid_post_reload(self):\n        \"\"\"\n        setup the aggrid\n        \"\"\"\n        viewLod = self.wdgrid.viewLod\n        self.wdgrid.agGrid.html_columns = self.getHtmlColumns()\n        self.wdgrid.linkWikidataItems(viewLod)\n        self.pkSelect.delete_components()\n        self.pkSelect.add(self.app.jp.Option(value=\"item\", text=\"item\"))\n        if self.wbQuery is not None:\n            for propertyName, row in self.wbQuery.propertiesByName.items():\n                columnName = row[\"Column\"]\n                if columnName:\n                    self.pkSelect.add(\n                        self.app.jp.Option(value=propertyName, text=columnName)\n                    )\n\n    async def onChangePk(self, msg: dict):\n        \"\"\"\n        handle selection of a different primary key\n\n        Args:\n            msg(dict): the justpy message\n        \"\"\"\n        self.pk = msg.value\n        if self.debug:\n            print(f\"changed primary key of {self.entityName} to {self.pk}\")\n        try:\n            await self.wdgrid.reload()\n        except Exception as ex:\n            self.app.handleException(ex)\n\n    def onCheckWikidata(self, msg=None):\n        \"\"\"\n        check clicked - check the wikidata content\n\n        Args:\n            msg(dict): the justpy message\n        \"\"\"\n        if self.debug:\n            print(msg)\n        try:\n            self.app.clearErrors()\n            self.loadItems()\n            # prepare syncing the table results with the wikibase query result\n            # query based on table content\n            self.query(self.sparql)\n            # get the view copy to insert result as html statements\n            viewLod = self.wdgrid.viewLod\n            self.addHtmlMarkupToViewLod(viewLod)\n            # reload the AG Grid with the html enriched content\n            self.wdgrid.reloadAgGrid(viewLod)\n        except Exception as ex:\n            self.app.handleException(ex)\n\n    def query(self, sparql):\n        \"\"\"\n        query the wikibase instance based on the list of dict\n        \"\"\"\n        lang = \"en\" if self.pkType == \"text\" else None\n        valuesClause = self.wbQuery.getValuesClause(\n            self.itemsByPk.keys(), self.pkProp, propType=self.pkType, lang=lang\n        )\n        self.sparqlQuery = self.wbQuery.asSparql(\n            filterClause=valuesClause,\n            orderClause=f\"ORDER BY ?{self.pkProp}\",\n            pk=self.pk,\n        )\n        if self.debug:\n            print(self.sparqlQuery)\n        self.wbRows = sparql.queryAsListOfDicts(self.sparqlQuery)\n        if self.debug:\n            pprint.pprint(self.wbRows)\n\n    def checkCell(\n        self,\n        viewLodRow,\n        column,\n        value,\n        propVarname,\n        propType,\n        propLabel,\n        propUrl: str = None,\n    ):\n        \"\"\"\n        update the cell value for the given\n\n        Args:\n            viewLodRow(dict): the row to modify\n            value(object): the value to set for the cell\n            propVarName(str): the name of the property Variable set in the SPARQL statement\n            propType(str): the abbreviation for the property Type\n            propLabel(str): the propertyLabel (if any)\n            propUrl(str): the propertyUrl (if any)\n        \"\"\"\n        cellValue = viewLodRow[column]\n        valueType = type(value)\n        print(\n            f\"{column}({propVarname})={value}({propLabel}:{propUrl}:{valueType})\u2b82{cellValue}\"\n        )\n        # overwrite empty cells\n        overwrite = not cellValue\n        if cellValue:\n            # overwrite values with links\n            if propUrl and cellValue == value:\n                overwrite = True\n        if overwrite and value:\n            doadd = True\n            # create links for item  properties\n            if not propType:\n                value = self.wdgrid.createLink(value, propLabel)\n            elif propType == \"extid\" or propType == \"url\":\n                value = self.wdgrid.createLink(propUrl, value)\n            if valueType == str:\n                pass\n            elif valueType == datetime.datetime:\n                value = value.strftime(\"%Y-%m-%d\")\n            else:\n                doadd = False\n                print(f\"{valueType} not added\")\n            if doadd:\n                viewLodRow[column] = value\n\n    def addHtmlMarkupToViewLod(self, viewLod: list):\n        \"\"\"\n        add HtmlMarkup to the view list of dicts\n        viewLod(list): a list of dict for the mark result\n        \"\"\"\n        # now check the wikibase rows retrieved in comparison\n        # to the current view List of Dicts Markup\n        for wbRow in self.wbRows:\n            # get the primary key value\n            pkValue = wbRow[self.pkProp]\n            pkValue = re.sub(\n                r\"http://www.wikidata.org/entity/(Q[0-9]+)\", r\"\\1\", pkValue\n            )\n            # if we have the primary key then we mark the whole row\n            if pkValue in self.itemsByPk:\n                if self.debug:\n                    print(f\"adding html markup for {pkValue}\")\n                # https://stackoverflow.com/questions/14538885/how-to-get-the-index-with-the-key-in-a-dictionary\n                lodRow = self.itemsByPk[pkValue]\n                rowIndex = lodRow[self.wdgrid.lodRowIndex_column]\n                viewLodRow = viewLod[rowIndex]\n                itemLink = self.wdgrid.createLink(wbRow[\"item\"], wbRow[\"itemLabel\"])\n                viewLodRow[\"item\"] = itemLink\n                itemDescription = wbRow.get(\"itemDescription\", \"\")\n                self.checkCell(\n                    viewLodRow,\n                    \"description\",\n                    itemDescription,\n                    propVarname=\"itemDescription\",\n                    propType=\"string\",\n                    propLabel=\"\",\n                )\n                # loop over the result items\n                for propVarname, value in wbRow.items():\n                    # remap the property variable name to the original property description\n                    if propVarname in self.wbQuery.propertiesByVarname:\n                        propRow = self.wbQuery.propertiesByVarname[propVarname]\n                        column = propRow[\"Column\"]\n                        propType = propRow[\"Type\"]\n                        if not propType:\n                            propLabel = wbRow[f\"{propVarname}Label\"]\n                        else:\n                            propLabel = \"\"\n                        if propType == \"extid\":\n                            propUrl = wbRow[f\"{propVarname}Url\"]\n                        elif propType == \"url\":\n                            propUrl = wbRow[f\"{propVarname}\"]\n                        else:\n                            propUrl = \"\"\n                        # Linked Or\n                        if (\n                            type(value) == str\n                            and value.startswith(\"http://www.wikidata.org/entity/\")\n                            and f\"{propVarname}Label\" in wbRow\n                        ):\n                            propUrl = value\n                            propLabel = wbRow[f\"{propVarname}Label\"]\n                            value = propLabel\n                        if column in lodRow:\n                            self.checkCell(\n                                viewLodRow,\n                                column,\n                                value,\n                                propVarname,\n                                propType,\n                                propLabel,\n                                propUrl,\n                            )\n\n    def getColumnTypeAndVarname(self, propName: str):\n        \"\"\"\n        slightly modified getter to account for \"item\" special case\n\n        Args:\n            propName(str): the name of the property\n        \"\"\"\n        if propName == \"item\":\n            column = \"item\"\n            propType = \"item\"\n            varName = \"item\"\n        else:\n            column, propType, varName = self.wbQuery.getColumnTypeAndVarname(propName)\n        return column, propType, varName\n\n    def getHtmlColumns(self):\n        \"\"\"\n        get the columns that have html content(links)\n        \"\"\"\n        htmlColumns = [0]\n        # loop over columns of list of dicts\n        wbQuery = self.wbQuery\n        if wbQuery is not None:\n            for columnIndex, column in enumerate(self.wdgrid.columns):\n                # check whether there is metadata for the column\n                if column in wbQuery.propertiesByColumn:\n                    propRow = wbQuery.propertiesByColumn[column]\n                    propType = propRow[\"Type\"]\n                    if not propType or propType == \"extid\" or propType == \"url\":\n                        htmlColumns.append(columnIndex)\n        return htmlColumns\n\n    def add_record_to_wikidata(\n        self,\n        record: dict,\n        row_index: int,\n        write: bool = False,\n        ignore_errors: bool = False,\n    ):\n        \"\"\"\n        add a record to wikidata when the row has been selected\n\n        Args:\n            record(dict): the data to be added to wikidata\n            row_index(int): the row index\n            write(bool): if True actually write data\n            ignore_errors(bool): if True ignore errors that might occur\n        \"\"\"\n        if not \"label\" in record:\n            raise Exception(f\"label missing in {record}\")\n        label = record[\"label\"]\n        mapDict = self.wbQuery.propertiesById\n        rowData = record.copy()\n        # remove index\n        if self.wdgrid.lodRowIndex_column in rowData:\n            rowData.pop(self.wdgrid.lodRowIndex_column)\n        qid, errors = self.wdgrid.wd.addDict(\n            rowData, mapDict, write=write, ignoreErrors=ignore_errors\n        )\n        if qid is not None:\n            # set item link\n            link = self.wdgrid.createLink(\n                f\"https://www.wikidata.org/wiki/{qid}\", f\"{label}\"\n            )\n            self.wdgrid.viewLod[row_index][\"item\"] = link\n            self.wdgrid.agGrid.load_lod(self.wdgrid.viewLod)\n            self.wdgrid.refreshGridSettings()\n        # @TODO improve error handling\n        if len(errors) &gt; 0:\n            self.wdgrid.app.errors.text = errors\n            print(errors)\n        # dry run and error display\n        if not write or len(errors) &gt; 0:\n            prettyData = pprint.pformat(rowData)\n            html = Markup(f\"&lt;pre&gt;{prettyData}&lt;/pre&gt;\")\n            # create an alert\n            alert = Alert(text=\"\", a=self.wdgrid.app.rowA)\n            alert.contentDiv.inner_html = html\n\n    def handle_row_selected(\n        self,\n        record: dict,\n        row_index: int,\n        write: bool = False,\n        ignore_errors: bool = False,\n    ):\n        record = record.copy()\n        record = {k: v if v != \"\" else None for k, v in record.items()}\n        prop_maps = self.get_property_mappings()\n        item_prop = PropertyMapping.get_item_mapping(prop_maps)\n        item_id = record.get(item_prop.column, None)\n        # sanitize record\n        for key in [item_prop.column, \"lodRowIndex\"]:\n            if key in record:\n                record.pop(key)\n        # limit record to properties that are synced with wikidata\n        prop_by_col = [pm.column for pm in prop_maps if not pm.is_item_itself()]\n        prop_by_col.extend([\"label\", \"description\"])\n        record = {k: v for k, v in record.items() if k in prop_by_col}\n        # fetch record from wikidata\n        wd_record = dict()\n        if item_id is not None and item_id != \"\":\n            wd_record = self.wdgrid.wd.get_record(item_id, prop_maps)\n            wd_record = {k: v for k, v in wd_record.items() if k in prop_by_col}\n        # normalize records\n        record = self.wdgrid.wd.normalize_records(record, prop_maps)\n        wd_record = self.wdgrid.wd.normalize_records(wd_record, prop_maps)\n\n        cr = ComparisonRecord(self.wdgrid.source, record, \"wikidata\", wd_record)\n        # save item specific attrs\n        cr.lodRowIndex = row_index\n        cr.qid = item_id\n        # show SyncDialog\n        self.wdgrid.sync_dialog_div.delete_components()\n        sync_dialog = SyncDialog(\n            cr,\n            sync_callback=self._sync_callback,\n            value_enhancement_callback=self.enhance_value_display,\n            a=self.wdgrid.sync_dialog_div,\n        )\n\n    def _sync_callback(self, sync_request: SyncRequest):\n        \"\"\"\n        Handle the given sync request\n        \"\"\"\n        write = not self.wdgrid.dryRun\n        lodRowIndex = getattr(sync_request.data, \"lodRowIndex\", None)\n        update_sources = []\n        if sync_request.action in [SyncAction.SYNC, SyncAction.RIGHT_SYNC]:\n            update_sources.append(sync_request.data.right_source_name)\n        if sync_request.action in [SyncAction.SYNC, SyncAction.LEFT_SYNC]:\n            update_sources.append(sync_request.data.left_source_name)\n        for source in update_sources:\n            record = sync_request.data.get_update_record_of(source)\n            for key, value in record.items():\n                if isinstance(value, WikidataItem):\n                    record[key] = value.qid\n            for key in [\"label\", \"desc\"]:\n                if key not in record and sync_request.data.comparison_data.get(\n                    key, None\n                ):\n                    record[key] = sync_request.data.comparison_data.get(key).left_value\n            prop_maps = self.get_property_mappings()\n            item_pm = PropertyMapping.get_item_mapping(prop_maps)\n            record[item_pm.column] = getattr(sync_request.data, \"qid\")\n            if source == \"wikidata\":\n                try:\n                    self.add_record_to_wikidata(\n                        record=record,\n                        row_index=lodRowIndex,\n                        write=write,\n                        ignore_errors=self.wdgrid.ignoreErrors,\n                    )\n                    self.wdgrid.sync_dialog_div.delete_components()\n                except Exception as ex:\n                    self.app.handleException(ex)\n            else:\n                self.app.handleException(\n                    Exception(f\"Updating of source {source} is not supported\")\n                )\n\n    def enhance_value_display(self, row: SyncDialogRow):\n        \"\"\"\n        Enhances the displayed value\n        \"\"\"\n        value_div_pairs = [\n            (row.comparison_data.left_value, row.left_value_div),\n            (row.comparison_data.right_value, row.right_value_div),\n        ]\n        for value_raw, div in value_div_pairs:\n            values = value_raw if isinstance(value_raw, list) else [value_raw]\n            for i, value in enumerate(values):\n                if i &gt; 0:\n                    Br(a=div)\n                if isinstance(value, WikidataItem):\n                    div.text = \"\"\n                    Link(a=div, href=value.get_url(), text=value.label)\n                elif isinstance(value, str) and value.startswith(\"http\"):\n                    div.text = \"\"\n                    Link(a=div, href=value, text=value)\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid.GridSync.__init__","title":"<code>__init__(wdgrid, entityName, pk, sparql, debug=False)</code>","text":"<p>constructor</p> <p>Parameters:</p> Name Type Description Default <code>wdgrid(WikiDataGrid)</code> <p>the wikidata grid to use</p> required <code>entityName</code> <code>str</code> <p>name of the sheet</p> required <code>pk</code> <code>str</code> <p>primary key</p> required <code>sparql(SPARQL)</code> <p>the sparql endpoint access to use</p> required <code>debug(bool)</code> <p>if True show debug information</p> required Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>def __init__(\n    self,\n    wdgrid: WikidataGrid,\n    entityName: str,\n    pk: str,\n    sparql: SPARQL,\n    debug: bool = False,\n):\n    \"\"\"\n    constructor\n\n    Args:\n        wdgrid(WikiDataGrid): the wikidata grid to use\n        entityName: name of the sheet\n        pk: primary key\n        sparql(SPARQL): the sparql endpoint access to use\n        debug(bool): if True show debug information\n    \"\"\"\n    self.wdgrid = wdgrid\n    self.app = wdgrid.app\n    self.entityName = entityName\n    self.pk = pk\n    self.sparql = sparql\n    self.debug = debug\n    self.wdgrid.additional_reload_callback = self.setup_aggrid_post_reload\n    self.wdgrid.row_selected_callback = self.handle_row_selected\n    self.wbQuery = None\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid.GridSync.addHtmlMarkupToViewLod","title":"<code>addHtmlMarkupToViewLod(viewLod)</code>","text":"<p>add HtmlMarkup to the view list of dicts viewLod(list): a list of dict for the mark result</p> Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>def addHtmlMarkupToViewLod(self, viewLod: list):\n    \"\"\"\n    add HtmlMarkup to the view list of dicts\n    viewLod(list): a list of dict for the mark result\n    \"\"\"\n    # now check the wikibase rows retrieved in comparison\n    # to the current view List of Dicts Markup\n    for wbRow in self.wbRows:\n        # get the primary key value\n        pkValue = wbRow[self.pkProp]\n        pkValue = re.sub(\n            r\"http://www.wikidata.org/entity/(Q[0-9]+)\", r\"\\1\", pkValue\n        )\n        # if we have the primary key then we mark the whole row\n        if pkValue in self.itemsByPk:\n            if self.debug:\n                print(f\"adding html markup for {pkValue}\")\n            # https://stackoverflow.com/questions/14538885/how-to-get-the-index-with-the-key-in-a-dictionary\n            lodRow = self.itemsByPk[pkValue]\n            rowIndex = lodRow[self.wdgrid.lodRowIndex_column]\n            viewLodRow = viewLod[rowIndex]\n            itemLink = self.wdgrid.createLink(wbRow[\"item\"], wbRow[\"itemLabel\"])\n            viewLodRow[\"item\"] = itemLink\n            itemDescription = wbRow.get(\"itemDescription\", \"\")\n            self.checkCell(\n                viewLodRow,\n                \"description\",\n                itemDescription,\n                propVarname=\"itemDescription\",\n                propType=\"string\",\n                propLabel=\"\",\n            )\n            # loop over the result items\n            for propVarname, value in wbRow.items():\n                # remap the property variable name to the original property description\n                if propVarname in self.wbQuery.propertiesByVarname:\n                    propRow = self.wbQuery.propertiesByVarname[propVarname]\n                    column = propRow[\"Column\"]\n                    propType = propRow[\"Type\"]\n                    if not propType:\n                        propLabel = wbRow[f\"{propVarname}Label\"]\n                    else:\n                        propLabel = \"\"\n                    if propType == \"extid\":\n                        propUrl = wbRow[f\"{propVarname}Url\"]\n                    elif propType == \"url\":\n                        propUrl = wbRow[f\"{propVarname}\"]\n                    else:\n                        propUrl = \"\"\n                    # Linked Or\n                    if (\n                        type(value) == str\n                        and value.startswith(\"http://www.wikidata.org/entity/\")\n                        and f\"{propVarname}Label\" in wbRow\n                    ):\n                        propUrl = value\n                        propLabel = wbRow[f\"{propVarname}Label\"]\n                        value = propLabel\n                    if column in lodRow:\n                        self.checkCell(\n                            viewLodRow,\n                            column,\n                            value,\n                            propVarname,\n                            propType,\n                            propLabel,\n                            propUrl,\n                        )\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid.GridSync.add_record_to_wikidata","title":"<code>add_record_to_wikidata(record, row_index, write=False, ignore_errors=False)</code>","text":"<p>add a record to wikidata when the row has been selected</p> <p>Parameters:</p> Name Type Description Default <code>record(dict)</code> <p>the data to be added to wikidata</p> required <code>row_index(int)</code> <p>the row index</p> required <code>write(bool)</code> <p>if True actually write data</p> required <code>ignore_errors(bool)</code> <p>if True ignore errors that might occur</p> required Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>def add_record_to_wikidata(\n    self,\n    record: dict,\n    row_index: int,\n    write: bool = False,\n    ignore_errors: bool = False,\n):\n    \"\"\"\n    add a record to wikidata when the row has been selected\n\n    Args:\n        record(dict): the data to be added to wikidata\n        row_index(int): the row index\n        write(bool): if True actually write data\n        ignore_errors(bool): if True ignore errors that might occur\n    \"\"\"\n    if not \"label\" in record:\n        raise Exception(f\"label missing in {record}\")\n    label = record[\"label\"]\n    mapDict = self.wbQuery.propertiesById\n    rowData = record.copy()\n    # remove index\n    if self.wdgrid.lodRowIndex_column in rowData:\n        rowData.pop(self.wdgrid.lodRowIndex_column)\n    qid, errors = self.wdgrid.wd.addDict(\n        rowData, mapDict, write=write, ignoreErrors=ignore_errors\n    )\n    if qid is not None:\n        # set item link\n        link = self.wdgrid.createLink(\n            f\"https://www.wikidata.org/wiki/{qid}\", f\"{label}\"\n        )\n        self.wdgrid.viewLod[row_index][\"item\"] = link\n        self.wdgrid.agGrid.load_lod(self.wdgrid.viewLod)\n        self.wdgrid.refreshGridSettings()\n    # @TODO improve error handling\n    if len(errors) &gt; 0:\n        self.wdgrid.app.errors.text = errors\n        print(errors)\n    # dry run and error display\n    if not write or len(errors) &gt; 0:\n        prettyData = pprint.pformat(rowData)\n        html = Markup(f\"&lt;pre&gt;{prettyData}&lt;/pre&gt;\")\n        # create an alert\n        alert = Alert(text=\"\", a=self.wdgrid.app.rowA)\n        alert.contentDiv.inner_html = html\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid.GridSync.checkCell","title":"<code>checkCell(viewLodRow, column, value, propVarname, propType, propLabel, propUrl=None)</code>","text":"<p>update the cell value for the given</p> <p>Parameters:</p> Name Type Description Default <code>viewLodRow(dict)</code> <p>the row to modify</p> required <code>value(object)</code> <p>the value to set for the cell</p> required <code>propVarName(str)</code> <p>the name of the property Variable set in the SPARQL statement</p> required <code>propType(str)</code> <p>the abbreviation for the property Type</p> required <code>propLabel(str)</code> <p>the propertyLabel (if any)</p> required <code>propUrl(str)</code> <p>the propertyUrl (if any)</p> required Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>def checkCell(\n    self,\n    viewLodRow,\n    column,\n    value,\n    propVarname,\n    propType,\n    propLabel,\n    propUrl: str = None,\n):\n    \"\"\"\n    update the cell value for the given\n\n    Args:\n        viewLodRow(dict): the row to modify\n        value(object): the value to set for the cell\n        propVarName(str): the name of the property Variable set in the SPARQL statement\n        propType(str): the abbreviation for the property Type\n        propLabel(str): the propertyLabel (if any)\n        propUrl(str): the propertyUrl (if any)\n    \"\"\"\n    cellValue = viewLodRow[column]\n    valueType = type(value)\n    print(\n        f\"{column}({propVarname})={value}({propLabel}:{propUrl}:{valueType})\u2b82{cellValue}\"\n    )\n    # overwrite empty cells\n    overwrite = not cellValue\n    if cellValue:\n        # overwrite values with links\n        if propUrl and cellValue == value:\n            overwrite = True\n    if overwrite and value:\n        doadd = True\n        # create links for item  properties\n        if not propType:\n            value = self.wdgrid.createLink(value, propLabel)\n        elif propType == \"extid\" or propType == \"url\":\n            value = self.wdgrid.createLink(propUrl, value)\n        if valueType == str:\n            pass\n        elif valueType == datetime.datetime:\n            value = value.strftime(\"%Y-%m-%d\")\n        else:\n            doadd = False\n            print(f\"{valueType} not added\")\n        if doadd:\n            viewLodRow[column] = value\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid.GridSync.enhance_value_display","title":"<code>enhance_value_display(row)</code>","text":"<p>Enhances the displayed value</p> Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>def enhance_value_display(self, row: SyncDialogRow):\n    \"\"\"\n    Enhances the displayed value\n    \"\"\"\n    value_div_pairs = [\n        (row.comparison_data.left_value, row.left_value_div),\n        (row.comparison_data.right_value, row.right_value_div),\n    ]\n    for value_raw, div in value_div_pairs:\n        values = value_raw if isinstance(value_raw, list) else [value_raw]\n        for i, value in enumerate(values):\n            if i &gt; 0:\n                Br(a=div)\n            if isinstance(value, WikidataItem):\n                div.text = \"\"\n                Link(a=div, href=value.get_url(), text=value.label)\n            elif isinstance(value, str) and value.startswith(\"http\"):\n                div.text = \"\"\n                Link(a=div, href=value, text=value)\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid.GridSync.getColumnTypeAndVarname","title":"<code>getColumnTypeAndVarname(propName)</code>","text":"<p>slightly modified getter to account for \"item\" special case</p> <p>Parameters:</p> Name Type Description Default <code>propName(str)</code> <p>the name of the property</p> required Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>def getColumnTypeAndVarname(self, propName: str):\n    \"\"\"\n    slightly modified getter to account for \"item\" special case\n\n    Args:\n        propName(str): the name of the property\n    \"\"\"\n    if propName == \"item\":\n        column = \"item\"\n        propType = \"item\"\n        varName = \"item\"\n    else:\n        column, propType, varName = self.wbQuery.getColumnTypeAndVarname(propName)\n    return column, propType, varName\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid.GridSync.getHtmlColumns","title":"<code>getHtmlColumns()</code>","text":"<p>get the columns that have html content(links)</p> Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>def getHtmlColumns(self):\n    \"\"\"\n    get the columns that have html content(links)\n    \"\"\"\n    htmlColumns = [0]\n    # loop over columns of list of dicts\n    wbQuery = self.wbQuery\n    if wbQuery is not None:\n        for columnIndex, column in enumerate(self.wdgrid.columns):\n            # check whether there is metadata for the column\n            if column in wbQuery.propertiesByColumn:\n                propRow = wbQuery.propertiesByColumn[column]\n                propType = propRow[\"Type\"]\n                if not propType or propType == \"extid\" or propType == \"url\":\n                    htmlColumns.append(columnIndex)\n    return htmlColumns\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid.GridSync.onChangePk","title":"<code>onChangePk(msg)</code>  <code>async</code>","text":"<p>handle selection of a different primary key</p> <p>Parameters:</p> Name Type Description Default <code>msg(dict)</code> <p>the justpy message</p> required Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>async def onChangePk(self, msg: dict):\n    \"\"\"\n    handle selection of a different primary key\n\n    Args:\n        msg(dict): the justpy message\n    \"\"\"\n    self.pk = msg.value\n    if self.debug:\n        print(f\"changed primary key of {self.entityName} to {self.pk}\")\n    try:\n        await self.wdgrid.reload()\n    except Exception as ex:\n        self.app.handleException(ex)\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid.GridSync.onCheckWikidata","title":"<code>onCheckWikidata(msg=None)</code>","text":"<p>check clicked - check the wikidata content</p> <p>Parameters:</p> Name Type Description Default <code>msg(dict)</code> <p>the justpy message</p> required Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>def onCheckWikidata(self, msg=None):\n    \"\"\"\n    check clicked - check the wikidata content\n\n    Args:\n        msg(dict): the justpy message\n    \"\"\"\n    if self.debug:\n        print(msg)\n    try:\n        self.app.clearErrors()\n        self.loadItems()\n        # prepare syncing the table results with the wikibase query result\n        # query based on table content\n        self.query(self.sparql)\n        # get the view copy to insert result as html statements\n        viewLod = self.wdgrid.viewLod\n        self.addHtmlMarkupToViewLod(viewLod)\n        # reload the AG Grid with the html enriched content\n        self.wdgrid.reloadAgGrid(viewLod)\n    except Exception as ex:\n        self.app.handleException(ex)\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid.GridSync.query","title":"<code>query(sparql)</code>","text":"<p>query the wikibase instance based on the list of dict</p> Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>def query(self, sparql):\n    \"\"\"\n    query the wikibase instance based on the list of dict\n    \"\"\"\n    lang = \"en\" if self.pkType == \"text\" else None\n    valuesClause = self.wbQuery.getValuesClause(\n        self.itemsByPk.keys(), self.pkProp, propType=self.pkType, lang=lang\n    )\n    self.sparqlQuery = self.wbQuery.asSparql(\n        filterClause=valuesClause,\n        orderClause=f\"ORDER BY ?{self.pkProp}\",\n        pk=self.pk,\n    )\n    if self.debug:\n        print(self.sparqlQuery)\n    self.wbRows = sparql.queryAsListOfDicts(self.sparqlQuery)\n    if self.debug:\n        pprint.pprint(self.wbRows)\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid.GridSync.setup","title":"<code>setup(a, header)</code>","text":"<p>initialize my components</p> <p>Parameters:</p> Name Type Description Default <code>a(HtmlComponent)</code> <p>the parent component</p> required <code>header(HtmlComponent)</code> <p>the header for the primary key selector</p> required Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>def setup(self, a, header):\n    \"\"\"\n    initialize my components\n\n    Args:\n        a(HtmlComponent): the parent component\n        header(HtmlComponent): the header for the primary key selector\n\n    \"\"\"\n    selectorClasses = \"w-32 m-2 p-2 bg-white\"\n    self.toolbar = self.app.jp.QToolbar(a=a, classes=\"flex flex-row gap-2\")\n    # for icons see  https://quasar.dev/vue-components/icon\n    # see justpy/templates/local/materialdesignicons/iconfont/codepoints for available icons\n    self.reloadButton = IconButton(\n        a=self.toolbar,\n        text=\"\",\n        title=\"reload\",\n        iconName=\"refresh-circle\",\n        click=self.wdgrid.reload,\n        classes=\"btn btn-primary btn-sm col-1\",\n    )\n    self.checkButton = IconButton(\n        a=self.toolbar,\n        text=\"\",\n        title=\"check\",\n        iconName=\"check\",\n        click=self.onCheckWikidata,\n        classes=\"btn btn-primary btn-sm col-1\",\n    )\n    self.loginButton = IconButton(\n        a=self.toolbar,\n        title=\"login\",\n        iconName=\"login\",\n        text=\"\",\n        click=self.onLogin,\n        classes=\"btn btn-primary btn-sm col-1\",\n    )\n    self.passwordDialog = QPasswordDialog(a=self.app.wp)\n    # selector for column/property\n    self.pkSelect = self.app.jp.Select(\n        classes=selectorClasses, a=header, value=self.pk, change=self.onChangePk\n    )\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid.GridSync.setup_aggrid_post_reload","title":"<code>setup_aggrid_post_reload()</code>","text":"<p>setup the aggrid</p> Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>def setup_aggrid_post_reload(self):\n    \"\"\"\n    setup the aggrid\n    \"\"\"\n    viewLod = self.wdgrid.viewLod\n    self.wdgrid.agGrid.html_columns = self.getHtmlColumns()\n    self.wdgrid.linkWikidataItems(viewLod)\n    self.pkSelect.delete_components()\n    self.pkSelect.add(self.app.jp.Option(value=\"item\", text=\"item\"))\n    if self.wbQuery is not None:\n        for propertyName, row in self.wbQuery.propertiesByName.items():\n            columnName = row[\"Column\"]\n            if columnName:\n                self.pkSelect.add(\n                    self.app.jp.Option(value=propertyName, text=columnName)\n                )\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid.WikidataGrid","title":"<code>WikidataGrid</code>","text":"<p>a grid with tabular data from wikidata to work with</p> Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>class WikidataGrid:\n    \"\"\"\n    a grid with tabular data from wikidata to work with\n    \"\"\"\n\n    def __init__(\n        self,\n        solution: WebSolution,\n        entityName: str,\n        entityPluralName: typing.Optional[str],\n        source: str,\n        getLod: Callable,\n        additional_reload_callback: typing.Union[Callable, None] = None,\n        row_selected_callback: typing.Callable = None,\n        lodRowIndex_column: str = \"lodRowIndex\",\n        debug: bool = False,\n    ):\n        \"\"\"\n        constructor\n        Args:\n            solution(Websolution): the web solution context of this grid\n            entityName(str): the name of the entity that this grid is for\n            entityPluralName(str): the plural name of the entity type of items displayed in this grid\n            source(str): the name of my source (where the data for this grid comes from)\n            getLod(Callable): the function to get my list of dicts\n            additional_reload_callback: Function to be called after fetching the new data and before updating aggrid\n            lodRowIndex_column(str): the column/attribute to use for tracking the index in the lod\n            debug(bool): if True show debug information\n        \"\"\"\n        self.solution = solution\n        self.lod_grid = None\n        self.setEntityName(entityName, entityPluralName)\n        self.lodRowIndex_column = lodRowIndex_column\n        self.getLod = getLod\n        self.additional_reload_callback = additional_reload_callback\n        self.row_selected_callback = row_selected_callback\n        self.source = source\n        self.debug = debug\n        self.dryRun = True\n        self.ignoreErrors = False\n        # @TODO make endpoint configurable\n        self.wd = Wikidata(\"https://www.wikidata.org\", debug=True)\n\n    def setEntityName(self, entityName: str, entityPluralName: str = None):\n        self.entityName = entityName\n        self.entityPluralName = (\n            entityPluralName if entityPluralName is not None else entityName\n        )\n\n    def setup(self, a):\n        \"\"\"\n        setup the Wikidata grid nicegui components\n        \"\"\"\n        if getattr(self, \"container\", None) is not None:\n            self.container.delete_components()\n        self.container = Div(a=a)\n        self.controls_div = Div(\n            a=self.container, classes=\"flex flex-row items-center m-2 p-2 gap-2\"\n        )\n        self.alert_div = Div(a=self.container)\n        self.dryRunButton = Switch(\n            a=self.controls_div,\n            labelText=\"dry run\",\n            checked=True,\n            disable=True,\n            on_input=self.onChangeDryRun,\n        )\n        self.ignoreErrorsButton = Switch(\n            a=self.controls_div,\n            labelText=\"ignore errors\",\n            checked=False,\n            on_input=self.onChangeIgnoreErrors,\n        )\n        self.addFitSizeButton()\n        self.assureAgGrid()\n        self.sync_dialog_div = Div(a=self.alert_div, classes=\"container\")\n\n    def setViewLod(self, lod: list, nonValue: str = \"-\"):\n        \"\"\"\n        add lodRowIndex column to list of dicts and\n        use a copy of the given list of dicts for the view\n        modify datetime columns to avoid problems with justpy\n\n        Args:\n            lod(list): the list of dicts\n            nonValue(str): the string to use for \"None\" values\n        \"\"\"\n        for index, row in enumerate(lod):\n            row[self.lodRowIndex_column] = index\n        self.viewLod = copy.deepcopy(lod)\n        # fix non values\n        for record in self.viewLod:\n            for key in list(record):\n                value = record[key]\n                if value is None:\n                    record[key] = nonValue\n                vtype = type(value)\n                # fix datetime entries\n                if vtype is datetime.datetime:\n                    value = str(value)\n                    record[key] = value\n        pass\n\n    def reloadAgGrid(self, viewLod: list, showLimit: int = 10):\n        \"\"\"\n        reload the agGrid with the given list of Dicts\n\n        Args:\n            viewLod(list): the list of dicts for the current view\n            showLimit: number of rows to print when debugging\n        \"\"\"\n        if self.agGrid is None:\n            return\n        self.agGrid.load_lod(viewLod)\n        if self.debug:\n            pprint.pprint(viewLod[:showLimit])\n        self.refreshGridSettings()\n\n    def setDefaultColDef(self, agGrid):\n        \"\"\"\n        set the default column definitions\n        Args:\n            agGrid: agGrid to set the column definitions for\n        \"\"\"\n        defaultColDef = agGrid.options.defaultColDef\n        defaultColDef.resizable = True\n        defaultColDef.sortable = True\n        # https://www.ag-grid.com/javascript-data-grid/grid-size/\n        defaultColDef.wrapText = True\n        defaultColDef.autoHeight = True\n\n    def refreshGridSettings(self):\n        \"\"\"\n        refresh the ag grid settings e.g. enable the row selection event handler\n        enable row selection event handler\n        \"\"\"\n        self.agGrid.on(\"rowSelected\", self.onRowSelected)\n        self.agGrid.options.columnDefs[0].checkboxSelection = True\n\n    def linkWikidataItems(self, viewLod, itemColumn: str = \"item\"):\n        \"\"\"\n        link the wikidata entries in the given item column if containing Q values\n\n        Args:\n            viewLod(list): the list of dicts for the view\n            itemColumn(str): the name of the column to handle\n        \"\"\"\n        for row in viewLod:\n            if itemColumn in row:\n                item = row[itemColumn]\n                if re.match(r\"Q[0-9]+\", item):\n                    itemLink = self.createLink(\n                        f\"https://www.wikidata.org/wiki/{item}\", item\n                    )\n                    row[itemColumn] = itemLink\n\n    async def reload(self, _msg=None, clearErrors=True):\n        \"\"\"\n        reload the table content via my getLod function\n\n        Args:\n            clearErrors(bool): if True clear Errors before reloading\n        \"\"\"\n        try:\n            if clearErrors:\n                self.app.clearErrors()\n            msg = (\n                f\"reload called ... fetching {self.entityPluralName} from {self.source}\"\n            )\n            if self.debug:\n                print(msg)\n            _alert = Alert(a=self.alert_div, text=msg)\n            await self.app.wp.update()\n            items = self.getLod()\n            self.setLod(items)\n            _alert.delete_alert(None)\n            msg = f\"found {len(items)} {self.entityPluralName}\"\n            _alert = Alert(a=self.alert_div, text=msg)\n            await self.app.wp.update()\n            if self.debug:\n                print(json.dumps(self.viewLod, indent=2, default=str))\n            if callable(self.additional_reload_callback):\n                self.additional_reload_callback()\n            self.reloadAgGrid(self.viewLod)\n            await self.app.wp.update()\n            await asyncio.sleep(0.2)\n            await self.agGrid.run_api(\"sizeColumnsToFit()\", self.app.wp)\n        except Exception as ex:\n            _error = Span(a=_alert, text=f\"Error: {str(ex)}\", style=\"color:red\")\n            self.app.handleException(ex)\n\n    def onChangeDryRun(self, msg: dict):\n        \"\"\"\n        handle change of DryRun setting\n\n        Args:\n            msg(dict): the justpy message\n        \"\"\"\n        self.dryRun = msg.value\n\n    def onChangeIgnoreErrors(self, msg: dict):\n        \"\"\"\n        handle change of IgnoreErrors setting\n\n        Args:\n            msg(dict): the justpy message\n        \"\"\"\n        self.ignoreErrors = msg.value\n\n    async def onRowSelected(self, msg):\n        \"\"\"\n        row selection event handler\n\n        Args:\n            msg(dict): row selection information\n        \"\"\"\n        if self.debug:\n            print(msg)\n        self.app.clearErrors()\n        if msg.selected:\n            self.rowSelected = msg.rowIndex\n            # check whether a lodeRowIndex Index is available\n            lodByRowIndex, _dup = LOD.getLookup(self.lod, self.lodRowIndex_column)\n            if len(lodByRowIndex) == len(self.lod):\n                lodRowIndex = msg.data[self.lodRowIndex_column]\n            else:\n                lodRowIndex = self.rowSelected\n            record = self.lod[lodRowIndex]\n            write = not self.dryRun\n            # show spinner\n            webpage: WebPage = msg.page\n            self.sync_dialog_div.delete_components()\n            Spinner(a=self.sync_dialog_div, classes=\"container\")\n            await webpage.update()\n            try:\n                if callable(self.row_selected_callback):\n                    self.row_selected_callback(\n                        record=record,\n                        row_index=lodRowIndex,\n                        write=write,\n                        ignore_errors=self.ignoreErrors,\n                    )\n            except Exception as ex:\n                self.sync_dialog_div.delete_components()\n                self.app.handleException(ex)\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid.WikidataGrid.__init__","title":"<code>__init__(solution, entityName, entityPluralName, source, getLod, additional_reload_callback=None, row_selected_callback=None, lodRowIndex_column='lodRowIndex', debug=False)</code>","text":"<p>constructor Args:     solution(Websolution): the web solution context of this grid     entityName(str): the name of the entity that this grid is for     entityPluralName(str): the plural name of the entity type of items displayed in this grid     source(str): the name of my source (where the data for this grid comes from)     getLod(Callable): the function to get my list of dicts     additional_reload_callback: Function to be called after fetching the new data and before updating aggrid     lodRowIndex_column(str): the column/attribute to use for tracking the index in the lod     debug(bool): if True show debug information</p> Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>def __init__(\n    self,\n    solution: WebSolution,\n    entityName: str,\n    entityPluralName: typing.Optional[str],\n    source: str,\n    getLod: Callable,\n    additional_reload_callback: typing.Union[Callable, None] = None,\n    row_selected_callback: typing.Callable = None,\n    lodRowIndex_column: str = \"lodRowIndex\",\n    debug: bool = False,\n):\n    \"\"\"\n    constructor\n    Args:\n        solution(Websolution): the web solution context of this grid\n        entityName(str): the name of the entity that this grid is for\n        entityPluralName(str): the plural name of the entity type of items displayed in this grid\n        source(str): the name of my source (where the data for this grid comes from)\n        getLod(Callable): the function to get my list of dicts\n        additional_reload_callback: Function to be called after fetching the new data and before updating aggrid\n        lodRowIndex_column(str): the column/attribute to use for tracking the index in the lod\n        debug(bool): if True show debug information\n    \"\"\"\n    self.solution = solution\n    self.lod_grid = None\n    self.setEntityName(entityName, entityPluralName)\n    self.lodRowIndex_column = lodRowIndex_column\n    self.getLod = getLod\n    self.additional_reload_callback = additional_reload_callback\n    self.row_selected_callback = row_selected_callback\n    self.source = source\n    self.debug = debug\n    self.dryRun = True\n    self.ignoreErrors = False\n    # @TODO make endpoint configurable\n    self.wd = Wikidata(\"https://www.wikidata.org\", debug=True)\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid.WikidataGrid.linkWikidataItems","title":"<code>linkWikidataItems(viewLod, itemColumn='item')</code>","text":"<p>link the wikidata entries in the given item column if containing Q values</p> <p>Parameters:</p> Name Type Description Default <code>viewLod(list)</code> <p>the list of dicts for the view</p> required <code>itemColumn(str)</code> <p>the name of the column to handle</p> required Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>def linkWikidataItems(self, viewLod, itemColumn: str = \"item\"):\n    \"\"\"\n    link the wikidata entries in the given item column if containing Q values\n\n    Args:\n        viewLod(list): the list of dicts for the view\n        itemColumn(str): the name of the column to handle\n    \"\"\"\n    for row in viewLod:\n        if itemColumn in row:\n            item = row[itemColumn]\n            if re.match(r\"Q[0-9]+\", item):\n                itemLink = self.createLink(\n                    f\"https://www.wikidata.org/wiki/{item}\", item\n                )\n                row[itemColumn] = itemLink\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid.WikidataGrid.onChangeDryRun","title":"<code>onChangeDryRun(msg)</code>","text":"<p>handle change of DryRun setting</p> <p>Parameters:</p> Name Type Description Default <code>msg(dict)</code> <p>the justpy message</p> required Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>def onChangeDryRun(self, msg: dict):\n    \"\"\"\n    handle change of DryRun setting\n\n    Args:\n        msg(dict): the justpy message\n    \"\"\"\n    self.dryRun = msg.value\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid.WikidataGrid.onChangeIgnoreErrors","title":"<code>onChangeIgnoreErrors(msg)</code>","text":"<p>handle change of IgnoreErrors setting</p> <p>Parameters:</p> Name Type Description Default <code>msg(dict)</code> <p>the justpy message</p> required Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>def onChangeIgnoreErrors(self, msg: dict):\n    \"\"\"\n    handle change of IgnoreErrors setting\n\n    Args:\n        msg(dict): the justpy message\n    \"\"\"\n    self.ignoreErrors = msg.value\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid.WikidataGrid.onRowSelected","title":"<code>onRowSelected(msg)</code>  <code>async</code>","text":"<p>row selection event handler</p> <p>Parameters:</p> Name Type Description Default <code>msg(dict)</code> <p>row selection information</p> required Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>async def onRowSelected(self, msg):\n    \"\"\"\n    row selection event handler\n\n    Args:\n        msg(dict): row selection information\n    \"\"\"\n    if self.debug:\n        print(msg)\n    self.app.clearErrors()\n    if msg.selected:\n        self.rowSelected = msg.rowIndex\n        # check whether a lodeRowIndex Index is available\n        lodByRowIndex, _dup = LOD.getLookup(self.lod, self.lodRowIndex_column)\n        if len(lodByRowIndex) == len(self.lod):\n            lodRowIndex = msg.data[self.lodRowIndex_column]\n        else:\n            lodRowIndex = self.rowSelected\n        record = self.lod[lodRowIndex]\n        write = not self.dryRun\n        # show spinner\n        webpage: WebPage = msg.page\n        self.sync_dialog_div.delete_components()\n        Spinner(a=self.sync_dialog_div, classes=\"container\")\n        await webpage.update()\n        try:\n            if callable(self.row_selected_callback):\n                self.row_selected_callback(\n                    record=record,\n                    row_index=lodRowIndex,\n                    write=write,\n                    ignore_errors=self.ignoreErrors,\n                )\n        except Exception as ex:\n            self.sync_dialog_div.delete_components()\n            self.app.handleException(ex)\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid.WikidataGrid.refreshGridSettings","title":"<code>refreshGridSettings()</code>","text":"<p>refresh the ag grid settings e.g. enable the row selection event handler enable row selection event handler</p> Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>def refreshGridSettings(self):\n    \"\"\"\n    refresh the ag grid settings e.g. enable the row selection event handler\n    enable row selection event handler\n    \"\"\"\n    self.agGrid.on(\"rowSelected\", self.onRowSelected)\n    self.agGrid.options.columnDefs[0].checkboxSelection = True\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid.WikidataGrid.reload","title":"<code>reload(_msg=None, clearErrors=True)</code>  <code>async</code>","text":"<p>reload the table content via my getLod function</p> <p>Parameters:</p> Name Type Description Default <code>clearErrors(bool)</code> <p>if True clear Errors before reloading</p> required Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>async def reload(self, _msg=None, clearErrors=True):\n    \"\"\"\n    reload the table content via my getLod function\n\n    Args:\n        clearErrors(bool): if True clear Errors before reloading\n    \"\"\"\n    try:\n        if clearErrors:\n            self.app.clearErrors()\n        msg = (\n            f\"reload called ... fetching {self.entityPluralName} from {self.source}\"\n        )\n        if self.debug:\n            print(msg)\n        _alert = Alert(a=self.alert_div, text=msg)\n        await self.app.wp.update()\n        items = self.getLod()\n        self.setLod(items)\n        _alert.delete_alert(None)\n        msg = f\"found {len(items)} {self.entityPluralName}\"\n        _alert = Alert(a=self.alert_div, text=msg)\n        await self.app.wp.update()\n        if self.debug:\n            print(json.dumps(self.viewLod, indent=2, default=str))\n        if callable(self.additional_reload_callback):\n            self.additional_reload_callback()\n        self.reloadAgGrid(self.viewLod)\n        await self.app.wp.update()\n        await asyncio.sleep(0.2)\n        await self.agGrid.run_api(\"sizeColumnsToFit()\", self.app.wp)\n    except Exception as ex:\n        _error = Span(a=_alert, text=f\"Error: {str(ex)}\", style=\"color:red\")\n        self.app.handleException(ex)\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid.WikidataGrid.reloadAgGrid","title":"<code>reloadAgGrid(viewLod, showLimit=10)</code>","text":"<p>reload the agGrid with the given list of Dicts</p> <p>Parameters:</p> Name Type Description Default <code>viewLod(list)</code> <p>the list of dicts for the current view</p> required <code>showLimit</code> <code>int</code> <p>number of rows to print when debugging</p> <code>10</code> Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>def reloadAgGrid(self, viewLod: list, showLimit: int = 10):\n    \"\"\"\n    reload the agGrid with the given list of Dicts\n\n    Args:\n        viewLod(list): the list of dicts for the current view\n        showLimit: number of rows to print when debugging\n    \"\"\"\n    if self.agGrid is None:\n        return\n    self.agGrid.load_lod(viewLod)\n    if self.debug:\n        pprint.pprint(viewLod[:showLimit])\n    self.refreshGridSettings()\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid.WikidataGrid.setDefaultColDef","title":"<code>setDefaultColDef(agGrid)</code>","text":"<p>set the default column definitions Args:     agGrid: agGrid to set the column definitions for</p> Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>def setDefaultColDef(self, agGrid):\n    \"\"\"\n    set the default column definitions\n    Args:\n        agGrid: agGrid to set the column definitions for\n    \"\"\"\n    defaultColDef = agGrid.options.defaultColDef\n    defaultColDef.resizable = True\n    defaultColDef.sortable = True\n    # https://www.ag-grid.com/javascript-data-grid/grid-size/\n    defaultColDef.wrapText = True\n    defaultColDef.autoHeight = True\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid.WikidataGrid.setViewLod","title":"<code>setViewLod(lod, nonValue='-')</code>","text":"<p>add lodRowIndex column to list of dicts and use a copy of the given list of dicts for the view modify datetime columns to avoid problems with justpy</p> <p>Parameters:</p> Name Type Description Default <code>lod(list)</code> <p>the list of dicts</p> required <code>nonValue(str)</code> <p>the string to use for \"None\" values</p> required Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>def setViewLod(self, lod: list, nonValue: str = \"-\"):\n    \"\"\"\n    add lodRowIndex column to list of dicts and\n    use a copy of the given list of dicts for the view\n    modify datetime columns to avoid problems with justpy\n\n    Args:\n        lod(list): the list of dicts\n        nonValue(str): the string to use for \"None\" values\n    \"\"\"\n    for index, row in enumerate(lod):\n        row[self.lodRowIndex_column] = index\n    self.viewLod = copy.deepcopy(lod)\n    # fix non values\n    for record in self.viewLod:\n        for key in list(record):\n            value = record[key]\n            if value is None:\n                record[key] = nonValue\n            vtype = type(value)\n            # fix datetime entries\n            if vtype is datetime.datetime:\n                value = str(value)\n                record[key] = value\n    pass\n</code></pre>"},{"location":"#onlinespreadsheet.wdgrid.WikidataGrid.setup","title":"<code>setup(a)</code>","text":"<p>setup the Wikidata grid nicegui components</p> Source code in <code>onlinespreadsheet/wdgrid.py</code> <pre><code>def setup(self, a):\n    \"\"\"\n    setup the Wikidata grid nicegui components\n    \"\"\"\n    if getattr(self, \"container\", None) is not None:\n        self.container.delete_components()\n    self.container = Div(a=a)\n    self.controls_div = Div(\n        a=self.container, classes=\"flex flex-row items-center m-2 p-2 gap-2\"\n    )\n    self.alert_div = Div(a=self.container)\n    self.dryRunButton = Switch(\n        a=self.controls_div,\n        labelText=\"dry run\",\n        checked=True,\n        disable=True,\n        on_input=self.onChangeDryRun,\n    )\n    self.ignoreErrorsButton = Switch(\n        a=self.controls_div,\n        labelText=\"ignore errors\",\n        checked=False,\n        on_input=self.onChangeIgnoreErrors,\n    )\n    self.addFitSizeButton()\n    self.assureAgGrid()\n    self.sync_dialog_div = Div(a=self.alert_div, classes=\"container\")\n</code></pre>"}]}